#+TITLE: phd-emacs - A GNU Emacs configuration
#+STARTUP: indent
#+OPTIONS: H:5 num:nil tags:nil toc:t timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing

This is an emacs settings file using a literate programming style.
It is to be loaded in the [[./init.el][init.el]] (or .emacs) file using the org-babel library.


* Editor

Although having a bit trouble, installing Emacs on macOS, I finally managed
with Homebrew using the following command:

#+begin_src shell :exports none
  brew install --with-cocoa --with-ctags --with-gnutls --with-imagemagick emacs
#+end_src

However, installing Emacs with Homebrew can lead to instabilities later on,
which is why I later opted for compiling Emacs from source code myself is
ultimately the best solution on any OS. For details, go to
[[https://github.com/phdenzel/dotfiles/blob/master/installers/emacs_install.sh][https://github.com/phdenzel/dotfiles/blob/master/installers/emacs_install.sh]].

These days though, I usually work on linux machines, which facilitates
installing emacs immensely.

On debian-based distros, type

#+begin_src shell :exports none
  sudo apt install emacs
#+end_src

On Arch-based systems, use

#+begin_src shell :exports none
  sudo pacman -S emacs
#+end_src


* User specifics

User-specific information is hardcoded and has to be completed if it
is needed, e.g. for mail extensions (see solution for multiple email
accounts in the Mail section below).

#+begin_src emacs-lisp
  (setq user-full-name "Philipp Denzel")
  (setq user-mail-address "phdenzel@gmail.com")
#+end_src


* Security

Emacs is a versatile, modular, and simply great text editor.
It realises it's full potential by installing extensions through package.el.
However, this happens through 3-rd party archives such as ELPA, MELPA, etc.
usually over HTTP.
For details see:
https://glyph.twistedmatrix.com/2015/11/editor-malware.html
Here, steps are taken to increase security...

If it isn't installed already (should be on most distros though),
install 'certifi' via pip...

#+begin_src shell :tangle no
  python -m pip install --user certifi
#+end_src

GnuTLS ensures a secure handshake:

#+begin_src emacs-lisp
  (require 'cl-lib)
  (setq tls-checktrust t)

  (let ((trustfile
         (replace-regexp-in-string
          "\\\\" "/"
          (replace-regexp-in-string
           "\n" ""
           (shell-command-to-string "python -m certifi")))))
    (setq tls-program
          (list
           (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
                   (if (eq window-system 'w32) ".exe" "") trustfile)))
    (setq gnutls-verify-error t)
    (setq gnutls-trustfiles (list trustfile)))

  ;; ;; Trust-No-One test
  ;; (let ((bad-hosts
  ;;        (cl-loop for bad
  ;;              in `("https://wrong.host.badssl.com/"
  ;;                   "https://self-signed.badssl.com/")
  ;;              if (condition-case e
  ;;                     (url-retrieve
  ;;                      bad (lambda (retrieved) t))
  ;;                   (error nil))
  ;;              collect bad)))
  ;;   (if bad-hosts
  ;;       (error (format "tls misconfigured; retrieved %s ok"
  ;;                      bad-hosts))
  ;;     (url-retrieve "https://badssl.com"
  ;;                   (lambda (retrieved) t))))
#+end_src


* Load packages with use-package

The Basic idea: instead of always going through a lengthy list of packages
and checking if they need to be installed at startup, 'use-package' is
employed to load the packages - if necessary also install them.
This is done after the initialization, and thus can increase the startup
substantially.
Thus all packages should be loaded with 'use-package'.


* Modules


** s

String manipulation module

#+begin_src emacs-lisp
  (use-package s
    :ensure t)
#+end_src


** f

File system module

#+begin_src emacs-lisp
  (use-package f
    :ensure t)
#+end_src


* Functions

Modified buffer splitting (don't load the same buffer when splitting frames)

#+begin_src emacs-lisp

  (defun phd/vsplit-last-buffer ()
    "Split the current buffer vertically and switch to the next."
    (interactive)
    (split-window-vertically)
    (other-window 1 nil)
    (switch-to-next-buffer))

  (defun phd/hsplit-last-buffer ()
    "Split the current buffer horizontally and switch to the next."
    (interactive)
    (split-window-horizontally)
    (other-window 1 nil)
    (switch-to-next-buffer))

#+end_src


Custom, interactive movement functions

#+begin_src emacs-lisp

  (defun phd/hydra-relinum/on ()
    "Activate relative line numbers in the current buffer."
    (interactive)
    (display-line-numbers-mode 1)
    (setq display-line-numbers 'relative))

  (defun phd/hydra-relinum/off ()
    "Deactivate relative line numbers in the current buffer."
    (interactive)
    (display-line-numbers-mode -1))

  (defun phd/hydra-nxtln (&optional arg)
    "Move cursor down ARG lines"
    (interactive "P")
    (setq this-command 'next-line)
    (next-line arg))

  (defun phd/hydra-prevln (&optional arg)
    "Move cursor up ARG lines"
    (interactive "P")
    (setq this-command 'previous-line)
    (previous-line arg))

  (defun phd/hydra-nxtchar (&optional arg)
    "Move cursor to the right by ARG characters"
    (interactive "P")
    (forward-char arg))

  (defun phd/hydra-prevchar (&optional arg)
    "Move cursor to the left by ARG characters"
    (interactive "P")
    (backward-char arg))

#+end_src


Evaluate & replace lisp code snippets, useful for scratch buffer math

#+begin_src emacs-lisp

  (defun phd/eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
        (prin1 (eval (read (current-kill 0)))
               (current-buffer))
      (error (message "Invalid expression")
             (insert (current-kill 0)))))

#+end_src


A few useful functions that can be activated with Meta-x.

#+begin_src emacs-lisp

  (defun what-face (pos)
    "The name of the face at POS on which the cursor is currently placed."
    (interactive "d")
    (let ((face (or (get-char-property (point) 'read-face-name)
                    (get-char-property (point) 'face))))
      (if face
          (message "Face: %s" face)
        (message "No face at %d" pos))))

  (defun phd/iwb ()
    "Indent the whole buffer."
    (interactive "P")
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max)))

  (defun phd/nuke-all-buffers ()
    "Kill all buffers."
    (interactive)
    (mapc 'kill-buffer (buffer-list))
    (delete-other-windows))

#+end_src


* Hydra, Ivy & Co.


** Hydras

The vast majority of packages are designed to speed up your workflow
by adding features which allow you to move inside a file more quickly
in one way or another.  Of course, this is almost always connected to
shortcuts, searches, or completions.  Here, hydra and associated
packages are configured. For more exemplary "hydras", see
[[https://github.com/abo-abo/hydra][https://github.com/abo-abo/hydra]].

#+begin_src emacs-lisp

    (defun phd/hydra-hint-toggle (name body)
      (interactive "P")
      (let ((cv (hydra-get-property name :verbosity)))
        (if (eq cv 2)
            (hydra-set-property name :verbosity 0)
          (hydra-set-property name :verbosity 2))
        body)
      )

#+end_src

#+begin_src emacs-lisp

  (use-package hydra
    :ensure t
    :init
    (defhydra phd/hydra-toggler (:color pink)
      "toggle"
      ("a" abbrev-mode "abbrev")
      ("s" flyspell-mode "flyspell")
      ("f" auto-fill-mode "fill")
      ("x" rainbow-mode "rainbow")
      ("c" rainbow-delimiters-mode "rainbow-paren")
      ("w" whitespace-mode "whitespace")
      ("e" electric-indent-mode "indent")
      ("v" (phd/hydra-hint-toggle 'phd/hydra-toggler 'phd/hydra-toggler/body) "hint")
      ("h" help "help")
      ("q" nil "cancel")
      ("Q" nil)
      ("C-g" nil)
      ("C-x h" nil))
    (defhydra phd/hydra-goto-mv
      (:color pink :pre phd/hydra-relinum/on :post phd/hydra-relinum/off)
      "goto-mv"
      ("j" phd/hydra-nxtln "↓")
      ("k" phd/hydra-prevln "↑")
      ("l" phd/hydra-nxtchar "→")
      ("h" phd/hydra-prevchar "←")
      ("x" goto-line "goto-line")
      ("C-j" forward-paragraph "↓↓")
      ("C-k" backward-paragraph "↑↑")
      ("C-l" right-word "→→")
      ("C-h" left-word "←←")
      ("C-M-j" drag-stuff-down "drag-↓")
      ("C-M-k" drag-stuff-up "drag-↑")
      ("C-x l" next-buffer "buffer-→")
      ("C-x h" previous-buffer "buffer-←")
      ("a" back-to-indentation "←-line")
      ("e" move-end-of-line "→-line")
      ("r" recenter-top-bottom "recenter")
      ("s" swiper "swiper")
      ("d d" kill-line "kill-ln")
      (";" comment-dwim-2 "comment")
      ("SPC" set-mark-command "mark")
      ("w" kill-ring-save "save")
      ("y" yank "yank")
      ("g" keyboard-quit "quit")
      ("v" (phd/hydra-hint-toggle 'phd/hydra-goto-mv 'phd/hydra-goto-mv/body) "hint")
      ("q" nil "cancel")
      ("Q" nil)
      ("C-g" nil)
      ("C-x j" nil)
      ("C-x C-j" nil))
    (defhydra phd/hydra-flycheck (:color blue :hint none)
      "
      ^
      ^Flycheck^          ^Errors^            ^Checker^
      ^────────^──────────^──────^────────────^───────^─────
      _q_ quit            _<_ previous        _?_ describe
      _M_ manual          _>_ next            _d_ disable
      _!_ verify setup    _f_ check           _m_ mode
      ^^                  _l_ list            _s_ select
      _v_ hint            ^^                  ^^
      "
      ("q" nil)
      ("Q" nil)
      ("C-g" nil)
      ("<" flycheck-previous-error :color pink)
      (">" flycheck-next-error :color pink)
      ("?" flycheck-describe-checker)
      ("M" flycheck-manual)
      ("d" flycheck-disable-checker)
      ("f" flycheck-buffer)
      ("l" flycheck-list-errors)
      ("m" flycheck-mode)
      ("s" flycheck-select-checker)
      ("v" (phd/hydra-hint-toggle 'phd/hydra-flycheck 'phd/hydra-flycheck/body) :exit nil)
      ("!" flycheck-verify-setup))
    :config
    (hydra-set-property 'phd/hydra-toggler :verbosity 2)
    (hydra-set-property 'phd/hydra-goto-mv :verbosity 0))

#+end_src


** Ivy enhancements

We enhance the minibuffer completion with three packages:

- ~ivy~: a generic, efficient, and customizable completion mechanism
- ~counsel~: ivy-enhanced versions of common Emacs commands
- ~swiper~:  ivy-enhanced alternative to isearch


*** Ivy

#+begin_src emacs-lisp

  (use-package ivy-hydra
    :ensure t
    :defer t
    :init (ivy-mode 1)
    :config (setq ivy-use-virtual-buffers t)
    )

#+end_src


*** Counsel

General ivy-minibuffer controls and common counsel command
replacements.  I typically search with lowercase letters only, and use
uppercase characters for ivy control.

#+begin_src emacs-lisp

  (use-package counsel
    :ensure t
    :bind* (("M-x"     . counsel-M-x)
            ("M-y"     . counsel-yank-pop)
            ("C-x C-f" . counsel-find-file)
            ("C-x b"   . counsel-switch-buffer)
            ("C-x C-b" . counsel-ibuffer)
            ("C-c i u" . counsel-unicode-char)
            ("M-i"     . counsel-imenu)
            ("C-c g"   . counsel-git)
            ("C-c j"   . counsel-git-grep)
            ("C-c l"   . counsel-locate)
            :map ivy-minibuffer-map
            ("J"   . ivy-next-line)
            ("K"   . ivy-previous-line)
            ;;("C-j" . ivy-next-line)
            ;;("C-k" . ivy-previous-line)
            ("Q"   . minibuffer-keyboard-quit)
            ("C-q" . minibuffer-keyboard-quit)
            :map swiper-map
            ("Q" . minibuffer-keyboard-quit)
            ("C-q" . minibuffer-keyboard-quit))
    :config
    (define-key read-expression-map (kbd "C-r")
      #'counsel-expression-history)
    (ivy-set-actions
     'counsel-find-file
     '(("d" (lambda (x)
              (delete-file (expand-file-name x)))
        "delete")))
    (ivy-set-actions
     'ivy-switch-buffer
     '(("k" (lambda (x)
              (kill-buffer x)
              (ivy--reset-state ivy-last))
        "kill")
       ("j" ivy--switch-buffer-other-window-action
        "other window"))))

#+end_src


*** Swiper

#+begin_src emacs-lisp

  (use-package swiper
    :pin melpa-stable
    :diminish ivy-mode
    :ensure t
    :bind* ("C-s" . swiper))

#+end_src


** Avy

Ace-jump alternative, similar to vim-easymotion: enables jumping to
visible text using a char-based decision tree

#+begin_src emacs-lisp

  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-word-1))

#+end_src


** Ace-window

Hydra-enhanced window manager

#+begin_src emacs-lisp

                (use-package ace-window
                  :ensure t
                  :defer t
                  :bind ("C-x o" . ace-window)
                  :config
                  (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l)
                        aw-dispatch-always t
                        aw-dispatch-alist
                        '((?x aw-delete-window "Ace - Delete Window")
                          (?c aw-swap-window "Ace - Swap Window")
                          (?n aw-flip-window "Ace - Flip Window")
                          (?\- aw-split-window-vert "Ace - V-Split Window")
                          (?\| aw-split-window-horz "Ace - H-Split Window")
                          (?m delete-other-windows "Ace - Maximize Window")
                          (?g delete-other-windows "Ace - Delete Window")
                          (?b balance-windows "Ace - Balance Windows")
                          (?v aw-show-dispatch-help)
                          ;; ?w hydra-window-size/body
                          ;; ?o hydra-window-scroll/body
                          ;; ?\; hydra-window-frame/body
                          ))
                  (when (package-installed-p 'hydra)
                    ;; Window
                    (defhydra hydra-window-size (:color red)
                      "Windows size"
                      ("h" shrink-window-horizontally "shrink horizontal")
                      ("j" shrink-window "shrink vertical")
                      ("k" enlarge-window "enlarge vertical")
                      ("l" enlarge-window-horizontally "enlarge horizontal")
                      ("q" nil "cancel" :exit t)
                      ("Q" nil :exit t)
                      ("C-g" nil :exit t))
                    ;; Frame
                    (defhydra hydra-window-frame (:color red)
                      "Frame"
                      ("f" make-frame "new frame")
                      ("x" delete-frame "delete frame")
                      ("q" nil "cancel" :exit t)
                      ("Q" nil :exit t)
                      ("C-g" nil :exit t))
                    ;; Scrolling
                    (defhydra hydra-window-scroll (:color red)
                      "Scroll other window"
                      ("n" scroll-other-window "scroll")
                      ("p" scroll-other-window-down "scroll down")
                      ("q" nil "cancel" :exit t)
                      ("Q" nil :exit t)
                      ("C-g" nil :exit t))
                    ;; add to dispatch list
                    (add-to-list
                     'aw-dispatch-alist '(?w hydra-window-size/body) t)
                    (add-to-list
                     'aw-dispatch-alist '(?o hydra-window-scroll/body) t)
                    (add-to-list
                     'aw-dispatch-alist '(?\; hydra-window-frame/body) t))
                  )

#+end_src


** Multiple cursors

#+begin_src emacs-lisp

  (use-package multiple-cursors
    :ensure t
    :bind (("M-SPC"         . set-rectangular-region-anchor)
           ("C-c ,"         . mc/edit-lines)
           ("C->"           . mc/mark-next-like-this)
           ("C-<"           . mc/mark-previous-like-this)
           ("C-c C-<"       . mc/mark-all-like-this)
           ("<C-M-mouse-1>" . mc/add-cursor-on-click)
           ("M-m"           . phd/hydra-mc/body))
    :init
    (defvar mc/cmds-to-run-for-all)
    (defvar mc/cmds-to-run-once)
    :config
    (when (package-installed-p 'hydra)
      (defun phd/hydra-mc-exit ()
        "Exit hydra and disable multiple-cursors-mode"
        (interactive)
        (mc/keyboard-quit)
        (phd/hydra-mc/nil))
      (defhydra phd/hydra-mc (:color pink :hint none)
        "
        _N_ext           _P_revious^^          Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
        ------------------------------------------------------------------
        [_j_]^^ Next     [_k_]   Previous    [_l_] Edit lines  [_0_] Insert numbers
        [_J_]^^ Skip     [_K_]   Skip        [_a_] Mark all    [_I_] Insert letters
        [_M-j_] Unmark^^ [_M-k_] Unmark      [_s_] Search      [_q_] Quit
        [_|_]^^ Align with input CHAR^^      [_x_] Mark more   [Click] Cursor at point"
        ("l" mc/edit-lines)
        ("a" mc/mark-all-like-this-dwim :exit t)
        ("n" mc/mark-next-like-this)
        ("N" mc/skip-to-next-like-this)
        ("M-n" mc/unmark-next-like-this)
        ("p" mc/mark-previous-like-this)
        ("P" mc/skip-to-previous-like-this)
        ("M-p" mc/unmark-previous-like-this)
        ("j" mc/mark-next-lines)
        ("J" mc/skip-to-next-like-this)
        ("M-j" mc/unmark-next-like-this)
        ("k" mc/mark-previous-like-this)
        ("K" mc/skip-to-previous-like-this)
        ("M-k" mc/unmark-previous-like-this)
        ("|" mc/vertical-align)
        ("0" mc/insert-numbers :exit t)
        ("I" mc/insert-letters :exit t)
        ("s" mc/mark-all-in-region-regexp :exit t)
        ("r" mc/mark-sgml-tag-pair :exit t)
        ("x" mc/mark-more-like-this-extended)
        ("q" phd/hydra-mc-exit :exit t)
        ("Q" nil :exit t)
        ("C-g" phd/hydra-mc-exit :exit t)
        ("<mouse-1>" mc/add-cursor-on-click)
        ("<down-mouse-1>" ignore)
        ("<drag-mouse-1>" ignore)))
    )

#+end_src


* Editing


** Comment

Do What I Mean when commenting

#+begin_src emacs-lisp

  (use-package comment-dwim-2
    :ensure t
    :bind ("M-/" . comment-dwim-2))

#+end_src


** Delete

#+begin_src emacs-lisp

(use-package hungry-delete
    :ensure t
    :bind ("<C-backspace>" . hungry-delete-backward))

#+end_src


** Select

#+begin_src emacs-lisp

  (use-package expand-region
    :ensure t
    :bind ("C-M-SPC" . er/expand-region))

#+end_src


** Drag

#+begin_src emacs-lisp

  (use-package drag-stuff
    :ensure t
    :bind (("<C-M-up>"   . drag-stuff-up)
           ("<C-M-down>" . drag-stuff-down)))

#+end_src


** Complete

Modern auto-complete [*Comp*lete-*any*thing]

#+begin_src emacs-lisp

  (use-package company
    :ensure t
    :defer 5
    :bind ("C-." . company-complete)
    :config
    (add-hook 'after-init-hook 'global-company-mode))

#+end_src


* Coding


** Language modes


*** Cython

#+begin_src emacs-lisp
  (use-package cython-mode
    :ensure t)
#+end_src


*** Haskell

#+begin_src emacs-lisp
  (use-package haskell-mode
    :ensure t
    :interpreter ("ghc" . haskell-mode))
#+end_src


*** Scala

#+begin_src emacs-lisp
  (use-package scala-mode
    :ensure t
    :interpreter ("scala" . scala-mode))
#+end_src


*** Markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :defer t
    :config
    (custom-set-variables '(markdown-command "/usr/bin/pandoc")))
#+end_src


*** YAML

#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :defer t)
#+end_src


*** HTML

#+begin_src emacs-lisp

  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
    (setq web-mode-ac-sources-alist
          '(("css" . (ac-source-css-property))
            ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    (defun my-web-mode-hook ()
      "Hooks for Web mode."
      (setq web-mode-enable-auto-closing t)
      (setq web-mode-enable-auto-quoting t)
      (setq web-mode-markup-indent-offset 2))
    (add-hook 'web-mode-hook 'my-web-mode-hook))

#+end_src


*** CSS & Co.

#+begin_src emacs-lisp
  (use-package less-css-mode
    :ensure t
    :defer t)
#+end_src

#+begin_src emacs-lisp
  (use-package scss-mode
    :ensure t
    :defer t
    :config (add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode)))
#+end_src

#+begin_src emacs-lisp
(use-package sass-mode
    :ensure t
    :defer t
    :config (add-to-list 'auto-mode-alist '("\\.sass\\'" . sass-mode)))
#+end_src


** Dev envs


*** Python

The ~elpy~ configuration will use these quoted variables

#+begin_src emacs-lisp
  (setq python-shell-completion-native-enable t)
  (setq py-python-command "python3")
  (setq python-shell-interpreter "python3")
#+end_src


**** elpy

#+begin_src emacs-lisp

  (use-package elpy
    :ensure t
    :defer t
    :init
    (setq elpy-rpc-python-command python-shell-interpreter)
    (advice-add 'python-mode :before 'elpy-enable)
    :config
    (add-hook 'elpy-mode-hook
              (lambda () (highlight-indentation-mode -1)))
    (eval-after-load "elpy"
      '(cl-dolist (key '("M-<up>" "M-<down>" "M-<left>" "M-<right>"))
         (define-key elpy-mode-map (kbd key) nil)))
    (when (load "flycheck" t t)
      (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
      (add-hook 'elpy-mode-hook 'flycheck-mode)))

#+end_src

Switch virtualenvs using ~M-x pyvenv-workon~. This requires exporting
the ~WORKON_HOME~ environment variable in your ~.bashrc~ (or
equivalent rc-file). By default, ~pipenv~ installs all its virtualenvs
in ~~/.local/share/virtualenvs~

#+begin_src bash :tangle no
export WORKON_HOME="${HOME}/.local/share/virtualenvs"
#+end_src

Also be sure to install the necessary libraries via ~M-x elpy-config~
within emacs or via pip in the current virtualenv:

#+begin_src shell :tangle no
  pip install jedi
  pip install flake8
  pip install importmagic
  pip install autopep8
  pip instal yapf
#+end_src

**** ein (emacs-ipython-notebook)

#+begin_src emacs-lisp

  (use-package ein
    :ensure t
    :config
    (setq ein:output-area-inlined-images t))

#+end_src


**** company-jedi

#+begin_src emacs-lisp

  (use-package company-jedi
    :ensure t
    :config
    (add-hook 'python-mode-hook 'jedi:setup)
    (setq jedi:complete-on-dot t)
    (setq jedi:use-shortcuts t)
    (defun phd/python-mode-hook ()
      (add-to-list 'company-backends 'company-jedi))
    (add-hook 'python-mode-hook 'phd/python-mode-hook))

#+end_src


*** Clojure

~cider~ extends emacs with support for interactive programming in
clojure

#+begin_src emacs-lisp

  (use-package cider
    :ensure t
    :pin melpa-stable
    :bind (:map cider-mode-map
                ("M-r" . cider-namespace-refresh))
    :config
    (add-hook 'cider-repl-mode-hook #'company-mode)
    (add-hook 'cider-mode-hook #'company-mode)
    (add-hook 'cider-mode-hook #'eldoc-mode)
    (add-hook 'cider-mode-hook #'cider-hydra-mode)
    (setq cider-repl-use-pretty-printing t)
    (setq cider-repl-display-help-banner nil))

#+end_src


** Syntax helpers


*** flycheck

#+begin_src emacs-lisp

  (use-package flycheck
    :ensure t
    :init
    (setq-default flycheck-flake8-maximum-line-length 99)
    (setq-default flycheck-disabled-checkers '(python-pylint))
    (global-flycheck-mode t))

#+end_src


** Utilities


*** highlight-parentheses

#+begin_src emacs-lisp

  (use-package highlight-parentheses
    :ensure t
    :config (global-highlight-parentheses-mode))

#+end_src


*** rainbow-delimiters

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :ensure t)

#+end_src


*** rainbow-mode

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t)
#+end_src


*** yasnippets


Install snippet system

#+begin_src emacs-lisp

  (use-package yasnippet
    :ensure t
    :config
    (setq yas-snippet-dirs '("~/.config/emacs/snippets"))
    (add-hook 'org-mode-hook #'yas-minor-mode)
    (add-hook 'web-mode-hook #'yas-minor-mode)
    (add-hook 'sh-mode-hook #'yas-minor-mode)
    (add-hook 'emacs-lisp-mode-hook #'yas-minor-mode)
    (add-hook 'haskell-mode-hook #'yas-minor-mode)
    (add-hook 'python-mode-hook #'yas-minor-mode)
    )

#+end_src

with some snippets

#+begin_src emacs-lisp

  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet
    :config
    (yas-reload-all))

#+end_src


** Project management


*** magit

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-c m" . magit-status))

#+end_src


*** projectile

Often visited projects can be added to ~projectile~ with
~projectile-add-known-project~

#+begin_src emacs-lisp

  (use-package projectile
    :ensure t
    :defer t
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map))
    :config
    (setq projectile-known-projects-file "~/.config/emacs/projectile-bookmarks.eld")
    (setq projectile-completion-system 'ivy)
    (setq projectile-indexing-method 'native)
    (projectile-mode t))

#+end_src

The counsel-extension adds a few more commands to the projectile
command map

#+begin_src emacs-lisp

  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode))

#+end_src


*** treemacs (tangle no)

#+begin_src emacs-lisp :tangle no

  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
            treemacs-deferred-git-apply-delay   0.5
            treemacs-display-in-side-window     t
            treemacs-file-event-delay           5000
            treemacs-file-follow-delay          0.2
            treemacs-follow-after-init          t
            treemacs-follow-recenter-distance   0.1
            treemacs-goto-tag-strategy          'refetch-index
            treemacs-indentation                2
            treemacs-indentation-string         " "
            treemacs-is-never-other-window      nil
            treemacs-max-git-entries            5000
            treemacs-no-png-images              nil
            treemacs-project-follow-cleanup     nil
            treemacs-persist-file               (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-recenter-after-file-follow nil
            treemacs-recenter-after-tag-follow  nil
            treemacs-show-cursor                nil
            treemacs-show-hidden-files          t
            treemacs-silent-filewatch           nil
            treemacs-silent-refresh             nil
            treemacs-sorting                    'alphabetic-desc
            treemacs-space-between-root-nodes   t
            treemacs-tag-follow-cleanup         t
            treemacs-tag-follow-delay           1.5
            treemacs-width                      35)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'extended))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

#+end_src


#+begin_src emacs-lisp :tangle no

  (use-package treemacs-projectile
    :ensure t
    :defer t
    :after treemacs projectile)

#+end_src


* Markup


** htmlize

For converting source code to HTML. Especially nice for preserving syntax
colouring of org-mode src-blocks in exported HTML code.

#+begin_src emacs-lisp
(use-package htmlize
    :ensure t
    :defer t)
#+end_src


** org-mode


*** org

#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :config
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
    (setq markdown-fontify-code-blocks-natively t)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (shell      . t)
       (haskell    . t)
       (python     . t)
       (dot        . t))))
#+end_src


**** org-bullets

#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :after org
    :commands (org-bullets-mode)
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src


**** org-reveal

#+begin_src emacs-lisp
  (setq org-reveal-root (concat "file://" (expand-file-name "~/local/reveal.js")))
  (setq org-reveal-mathjax t)
#+end_src


**** org-toc

#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :after org
    :init
    (add-hook 'org-mode-hook 'toc-org-mode)
    ;; :config
    ;; (define-key markdown-mode-map (kbd "\C-c\C-o") 'toc-org-markdown-follow-thing-at-point)
    )
#+end_src



*** Exports

Automatically execute source code blocks during exports
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src


**** ox-md

#+begin_src emacs-lisp
  (use-package ox-md
    :ensure nil
    :after org)
#+end_src


**** my-md

Custom markdown export backend with html-formatted src-block export when
marked with ~#+ATTR_MD: :language t~

#+begin_src emacs-lisp

  (defun my-md-src-block (src-block contents info)
    "Transcode a SRC-BLOCK element from Org to Markdown.
    CONTENTS is nil. INFO is a plist used as a communication 
    channel."
    (if (not (org-export-read-attribute :attr_md src-block :language))
        (org-export-with-backend 'md src-block contents info)
      (org-export-with-backend 'html src-block contents info)))

  (org-export-define-derived-backend 'my-md 'md
    :translate-alist '((src-block . my-md-src-block)))

#+end_src

For now use ~M-:~ to evaluate

#+begin_src emacs-lisp :tangle no
  (org-export-to-buffer 'my-md "*Org MY-MD Export*")
#+end_src

this will create a buffer with the export which can be saved to file.


**** ox-gfm

#+begin_src emacs-lisp
  (use-package ox-gfm
    :ensure t
    :after org)
#+end_src


**** ox-reveal

#+begin_src emacs-lisp
  (use-package ox-reveal
    :ensure t
    :after org)
#+end_src


**** TODO Custom hooks

Convert custom canvas expression in org-export with backend ~html~ and
~reveal~

TODO:
- ‘beginning-of-buffer’ is for interactive use only; use ‘(goto-char
  (point-min))’ instead.
- ‘replace-regexp’ is for interactive use only; use
  ‘re-search-forward’ and ‘replace-match’ instead.

#+begin_src emacs-lisp :tangle no

  (defun org-export-canvas (backend)
    "Replace @canvas{descr|id} to <canvas> html text in current buffer"
    (when (or (equal backend 'html) (equal backend 'reveal))
      (save-excursion
        (beginning-of-buffer)
        (replace-regexp "\@canvas{{{\\(.*?\\)|\\(.*?\\)}}}"
                        "@@html:<canvas id=\"\\2\" width=\"100%\" height=\"100%\">\\1</canvas>@@"
                        ))))

  (add-hook 'org-export-before-parsing-hook 'org-export-canvas)

#+end_src


**** Custom links


***** Youtube embeddings

#+begin_src emacs-lisp

  (defvar yt-iframe-format
    ;; You may want to change your width and height.
    (concat "<iframe"
            " src=\"https://www.youtube.com/embed/%s?rel=0&amp;showinfo=0&amp;loop=1\""
            " width=\"%s\""
            " height=\"%s\""
            " allow=\"autoplay; encrypted-media\""
            " frameborder=\"0\""
            " allowfullscreen>%s</iframe>"))

  (org-link-set-parameters
   "yt"
   :follow (lambda (handle)
             (browse-url
              (concat "https://www.youtube.com/embed/"
                      handle)))
   :export (lambda (path desc backend)
             (let* ((f (split-string path ","))
                    (path (nth 0 f))
                    (yt-width (or (nth 1 f) "440"))
                    (yt-height (or (nth 2 f) "335"))
                    )
               (cl-case backend
                 (html (format yt-iframe-format
                               path yt-width yt-height (or desc "")))
                 (latex (format "\href{%s}{%s}"
                                path (or desc "video"))))))
   )


  ;; (org-add-link-type
  ;;  "yt"
  ;;  (lambda (handle)
  ;;    (browse-url
  ;;     (concat "https://www.youtube.com/embed/"
  ;;             handle)))
  ;;  (lambda (path desc backend)
  ;;    (let* ((f (split-string path ","))
  ;;           (path (nth 0 f))
  ;;           (yt-width (or (nth 1 f) "440"))
  ;;           (yt-height (or (nth 2 f) "335"))
  ;;           )
  ;;      (cl-case backend
  ;;        (html (format yt-iframe-format
  ;;                      path yt-width yt-height (or desc "")))
  ;;        (latex (format "\href{%s}{%s}"
  ;;                       path (or desc "video")))
  ;;        )
  ;;      )
  ;;    ))

#+end_src


***** Giphy embeddings

#+begin_src emacs-lisp

  (defvar giphy-iframe-format
    ;; You may want to change your width and height.
    (concat "<iframe"
            " src=\"https://giphy.com/embed/%s\""
            " width=\"%s\""
            " height=\"%s\""
            " frameborder=\"0\""
            " allowfullscreen>%s</iframe>"))

  (org-link-set-parameters
   "giphy"
   :follow (lambda (handle)
             (browse-url
              (concat "https://giphy.com/embed/"
                      handle)))
   :export (lambda (path desc backend)
             (let* ((f (split-string path ","))
                    (path (nth 0 f))
                    (giphy-width (or (nth 1 f) "440"))
                    (giphy-height (or (nth 2 f) "335"))
                    )
               (cl-case backend
                 (html (format giphy-iframe-format
                               path giphy-width giphy-height (or desc "")))
                 (latex (format "\href{%s}{%s}"
                                path (or desc "video"))))))
   )

  ;; (org-add-link-type
  ;;  "giphy"
  ;;  (lambda (handle)
  ;;    (browse-url
  ;;     (concat "https://giphy.com/embed/"
  ;;             handle)))
  ;;  (lambda (path desc backend)
  ;;    (let* ((f (split-string path ","))
  ;;           (path (nth 0 f))
  ;;           (giphy-width (or (nth 1 f) "440"))
  ;;           (giphy-height (or (nth 2 f) "335"))
  ;;           )
  ;;      (cl-case backend
  ;;        (html (format giphy-iframe-format
  ;;                      path giphy-width giphy-height (or desc "")))
  ;;        (latex (format "\href{%s}{%s}"
  ;;                       path (or desc "video")))
  ;;        )
  ;;      )
  ;;    ))

#+end_src


** LaTeX

AUCTeX is an integrated environment for writing input files for LaTeX

#+begin_src emacs-lisp
  (use-package auctex
    :ensure t
    :defer t
    :defines (TeX-view-program-selection)
    :config
    (require 'tex)
    (TeX-global-PDF-mode t)
    (add-to-list 'TeX-view-program-selection
                 '(output-pdf "Zathura")))
#+end_src


* Shells


** vterm

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :defines (term-prompt-regexp
              vterm-shell
              vterm-max-scrollback)
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
    (setq vterm-shell "bash")
    (setq vterm-max-scrollback 10000))

#+end_src


** TODO eshell


* Mail


** mu4e

#+begin_src emacs-lisp

  (use-package phd-mu4e-setup
    :ensure nil
    :load-path "~/local/phd-mu4e-setup/"
    :bind (("C-x m"   . mu4e)
           ("C-x C-m" . mu4e-compose-new)
           ("C-x M-m" . mu4e-update-mail-and-index)))

#+end_src


** Password management

Use UNIX pass instead of authinfo

#+begin_src emacs-lisp

  (use-package pass
    :ensure t
    :config
    (setf epg-pinentry-mode 'loopback)
    (auth-source-pass-enable)
    (setq auth-sources '(password-store "~/.authinfo.gpg" "~/.authinfo" "~/.netrc")))

#+end_src

#+begin_src emacs-lisp
  (use-package auth-source-xoauth2
    :ensure t)
#+end_src


** org-mime

Use org-mode to write html content in mails

#+begin_src emacs-lisp

  (use-package org-mime
    :ensure t
    :hook ((message-mode . (lambda ()
                             (local-set-key (kbd "C-c M-o") 'org-mime-htmlize)))
           (org-mode . (lambda ()
                         (local-set-key (kbd "C-c M-o") 'org-mime-org-buffer-htmlize))))
    :config
    (setq org-mime-export-options '(:section-numbers nil
                                    :with-author nil
                                    :with-toc nil)))

#+end_src


* Helpers

Settings for a few helping features.


** which-key

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config (which-key-mode))
#+end_src


** company-quickhelp

#+begin_src emacs-lisp

  (use-package company-quickhelp
    :ensure t
    :config
    (eval-after-load 'company
      '(define-key company-active-map
         (kbd "C-c h")
         #'company-quickhelp-manual-begin)))

#+end_src


* Basic settings

Here, some default quirks of Emacs are corrected, to make it behave
like we want it to. These settings modify the general behaviour and
take global effect.


** Behaviour


*** Miscellaneous settings

#+begin_src emacs-lisp
  ;; Startup screen
  (setq inhibit-startup-message t)

  ;; Ask for y/n instead of yes/no
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; For orientation
  (global-hl-line-mode t)
#+end_src


*** Dired

#+begin_src emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)

#+end_src


*** Brackets

#+begin_src emacs-lisp
  ;; highlight pair
  (show-paren-mode t)

  ;; auto-close brackets
  (electric-pair-mode t)
  (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
  (add-hook
   'org-mode-hook
   (lambda ()
     (setq-local electric-pair-inhibit-predicate
                 `(lambda (c) (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src


*** Clipboard

#+begin_src emacs-lisp
(setq select-enable-clipboard t
        select-enable-primary t
        save-interprogram-paste-before-kill t
        require-final-newline t)
#+end_src


*** Tabs

#+begin_src emacs-lisp
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)
  (setq indent-line-function 'insert-tab)
  (electric-indent-mode t)
#+end_src


*** Unique buffers

#+begin_src  emacs-lisp
  (if (< emacs-major-version 25)
      (require 'uniquify))
  (setq uniquify-buffer-name-style 'forward)
#+end_src


*** Mouse-wheel speed

#+begin_src emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 4) ((meta)) ((control)) ))
  (setq mouse-wheel-progressive-speed nil)
#+end_src


*** Silence bell

#+begin_src emacs-lisp
  (defun phd-bell ())
  (setq ring-bell-function 'phd-bell
        visible-bell nil)
#+end_src


** Keyboard shortcuts

Regular remaps and bindings

#+begin_src emacs-lisp

    ;; Reload buffer
    (global-set-key (kbd "<f5>") 'revert-buffer)

    ;; Kill current buffer instead of any buffer
    (global-set-key (kbd "C-x k") 'kill-this-buffer)

    ;; Go back to indentation instead of beginning of line
    (global-set-key (kbd "C-a") 'back-to-indentation)

    ;; Efficiently move up or down
    (global-set-key (kbd "<M-up>") 'backward-paragraph)
    (global-set-key (kbd "<M-down>") 'forward-paragraph)

    ;; Expand
    (global-set-key (kbd "M-.") 'hippie-expand) 

#+end_src


Dired bindings

#+begin_src emacs-lisp
  ;; evil movement
  (define-key dired-mode-map "j" 'dired-next-line)
  (define-key dired-mode-map "k" 'dired-previous-line)
  (define-key dired-mode-map "h" 'left-char)
  (define-key dired-mode-map "l" 'right-char)
  ;; change behaviour of Enter -> a (doesn't open in new buffer)
  (define-key dired-mode-map (kbd "<return>") 'dired-find-alternate-file)
  ;; (define-key dired-mode-map "a" 'dired-find-file)
#+end_src


Binding custom functions and hydras

#+begin_src emacs-lisp

  ;; Modified vertical/horizontal buffer splits
  (global-set-key (kbd "C-x 2") 'phd/vsplit-last-buffer)
  (global-set-key (kbd "C-x 3") 'phd/hsplit-last-buffer)

  ;; Indent the entire buffer
  (global-set-key (kbd "C-c <tab>") 'phd/iwb)

  ;; Evaluate/replace lisp code... useful for scratch buffer math
  (global-set-key (kbd "C-c C-e") 'phd/eval-and-replace)
  (define-key lisp-interaction-mode-map (kbd "C-c e") 'eval-print-last-sexp)

  ;; Hydra bindings
  (global-set-key (kbd "C-x h")   'phd/hydra-toggler/body)
  (global-set-key (kbd "C-x j")   'phd/hydra-goto-mv/body)
  (global-set-key (kbd "C-x C-j") 'phd/hydra-goto-mv/body)
  (global-set-key (kbd "C-c f")   'phd/hydra-flycheck/body)

#+end_src


** System language settings

Prefer UTF-8 encodings

#+begin_src emacs-lisp

    ;; Prefer UTF-8
    (set-language-environment "UTF-8")
    (prefer-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (setq locale-coding-system 'utf-8)

#+end_src


Configure ispell spell checker which comes bundled with emacs by
default since v24. It can use multiple programs:
- ~aspell~ should be on most Linux systems, but seems to be no longer
  maintained
- ~hunspell~ is widely used, but has inferior capabilities

#+begin_src emacs-lisp

  (use-package ispell
    :init
    (setq ispell-program-name "/usr/bin/aspell")
    :config
    (when (executable-find "hunspell")
      (setq-default ispell-program-name "hunspell")))

#+end_src


** Backup behaviour

The default backup behaviour of emacs is quite annoying, as it
duplicates/spams local folders. I much rather have emacs gather them
in a dedicated directory.

#+begin_src emacs-lisp

  ;; collect them in .config/emacs/backups
  (defvar phd-backup-directory "~/.config/emacs/backups")
  ;; and if it doesn't exist, make it
  (if (not (file-exists-p phd-backup-directory))
      (make-directory phd-backup-directory t))
  ;; configure backup list
  (setq backup-directory-alist `(("." . ,phd-backup-directory)))
  ;; configure backup saving behavior
  (setq make-backup-files t
        backup-by-copying t
        version-control t
        delete-old-versions t
        delete-by-moving-to-trash t
        kept-old-versions 5
        kept-new-versions 10
        auto-save-default t
        auto-save-timeout 15
        auto-save-interval 300)

  ;; configure backup deletion
  (setq delete-by-moving-to-trash t
        trash-directory "~/.local/share/Trash/files")
  ;; trash-directory "~/.Trash")

  ;; save frame position history
  (if (< emacs-major-version 25)
      (progn
        (require 'saveplace)
        (setq-default save-place t))
    (save-place-mode 1))

#+end_src


* GUI

Settings specific to GUI mode.
Does not take effect when executed in a terminal.

#+begin_src emacs-lisp

  (defun new-frame-setup (&optional frame)
    (when (display-graphic-p frame)

      (message "New frame in window system")
      ;; no new frames when opening with Finder/Explorer
      (setq pop-up-frames nil)

      ;; hide bars
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (menu-bar-mode -1) ;; if inside window, might be nice to keep

      ;; Scrolling cursor with mouse wheel (instead of frame)
      (global-set-key (kbd "<mouse-4>") 'phd/hydra-prevln)
      (global-set-key (kbd "<mouse-5>") 'phd/hydra-nxtln)

      )
    )

  (add-hook 'after-init-hook 'new-frame-setup)
  (add-hook 'after-make-frame-functions 'new-frame-setup)

#+end_src


* Terminal window

Settings specific to terminal mode.
Does not take effect when executed in a separate window.

#+begin_src emacs-lisp
  (defun new-term-setup (&optional frame)
    (unless (display-graphic-p frame)

      ;; hide bars
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (menu-bar-mode -1)

      ;; activate mouse mode
      (xterm-mouse-mode t)
      (mouse-wheel-mode t)

      ;; Scrolling cursor with mouse wheel (instead of frame)
      (global-set-key (kbd "<mouse-4>") 'phd/hydra-prevln)
      (global-set-key (kbd "<mouse-5>") 'phd/hydra-nxtln)

      )
    )
  (add-hook 'after-init-hook 'new-term-setup)
  ;; (add-hook 'terminal-init-xterm-hook 'new-term-setup)

#+end_src


* Styling

All style settings are defined here...


** Theme

#+begin_src emacs-lisp
  (add-hook 'after-init-hook
            (lambda () (load-theme 'phd-dark t)))
#+end_src


*** Transparency

#+begin_src emacs-lisp :tangle no
  (set-frame-parameter (selected-frame) 'alpha '(95 . 50))
  (add-to-list 'default-frame-alist '(alpha . (95 . 50)))
#+end_src


*** Gamma adjustment

#+begin_src emacs-lisp :tangle no
  (setq default-frame-alist '((screen-gamma . 1.0)))
  (setq initial-frame-alist '((screen-gamma . 1.0)))
#+end_src


** Font

#+begin_src emacs-lisp
  (add-hook 'after-make-frame-functions
            (lambda (&optional frame)
              (when (display-graphic-p frame)
                (set-face-attribute 'default nil :font "Fira Mono-14"))))
#+end_src


*** all-the-icons

All-the-icons is pretty. Install the fonts first from
https://github.com/domtronn/all-the-icons.el/tree/master/fonts

#+begin_src shell :exports none
  cd ~/Downloads
  git clone git@github.com:domtronn/all-the-icons.el.git
#+end_src

... and afterwards load the package:

#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+end_src


*** prettify-symbols

#+begin_src emacs-lisp
  (global-prettify-symbols-mode 1)
#+end_src


** Dashboard


My Custom dashboard functions

#+begin_src emacs-lisp
  (defun phd-db/visit-dreamworld (&rest _)
    "Go to my https://github.com/phdenzel website."
    (interactive)
    (browse-url "https://github.com/phdenzel"))

  (defun phd-db/show-stars (&rest _)
    "Show stars"
    (interactive)
    (message "stars")
    )

  (defun phd-db/show-flags (&rest _)
    "Show flags"
    (interactive)
    (message "flags")
    )
#+end_src



Create custom mode section

#+begin_src emacs-lisp
  (setq phd-db-modes (list 'mu4e))

  (defun phd-db/insert-modes (list-size)
    (dashboard-insert-section
     "Modes:"
     phd-db-modes
     list-size
     'modes
     "x"
     `(lambda (&rest ignore) (message "%s" (quote ,el)))
     (format "%s" el)
     ))

#+end_src


My dashboard configuration

#+begin_src emacs-lisp

    (use-package dashboard
      :ensure nil
      :load-path "~/local/phd-dashboard/"
      :config
      (dashboard-setup-startup-hook)
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
      ;; Banner & Appearance
      (setq dashboard-center-content t
            dashboard-startup-banner 'phdemacs
            dashboard-set-heading-icons t
            dashboard-set-file-icons t
            dashboard-set-init-info nil)
      (setq dashboard-items '((modes     . 5) (bookmarks . 5)
                              (projects  . 5) (recents   . 3)))
      ;; Functionality
      (setq dashboard-modes-alist
            '(("mu4e" . mu4e)
              ("phd-modeline-mode" . phd-modeline-mode)))
      (setq dashboard-mode-status-alist
            '(("mu4e" . mu4e~proc-running-p)
              ("phd-modeline-mode" . phd-modeline-mode)))
      (setq dashboard-projects-switch-function
            'counsel-projectile-switch-project-by-name)
      ;; Navigator
      (setq dashboard-set-navigator t
            dashboard-navigator-buttons
            `(((,(all-the-icons-octicon "mark-github"
                                        :height 1.1
                                        :v-adjust 0.0) nil "Browse homepage"
                  phd-db/visit-dreamworld link))
              ;; ---
              (("★" nil "Show stars" phd-db/show-stars font-lock-keyword-face)
               ;; ("?" "" "Help" (lambda (&rest _) (message "help")) default)
               ("⚑" nil "Show flags" phd-db/show-flags font-lock-string-face))
              ))
      ;; Footer
      (setq dashboard-footer-messages '("Deus Ex Machina!")
            dashboard-footer-icon
            (all-the-icons-octicon "dashboard"
                                   :height 1.1
                                   :v-adjust -0.05
                                   :face 'font-lock-keyword-face))
      )

#+end_src


** Modeline

For a long time, I used the ~powerline~ emacs package to customize my
modeline. However, it turns out that the powerline and my
customizations caused emacs to slow down noticeably (at least, I think
so... after switching to my own implementation, I noticed a speed up).

So, I decided to use Emacs' built-in ~mode-line~ and apply a light
customization myself.

#+begin_src emacs-lisp

  (use-package phd-modeline
    :ensure nil
    :load-path "~/local/phd-modeline/"
    :after all-the-icons
    :hook (after-init . phd-modeline-mode)
    :bind (("C-x |" . phd-modeline-mode))
    :config
    (require 'phd-mu4e-setup)
    (setq phd-modeline-mu4e-unread-query phd-mu4e-inbox-query)
    (phd-modeline-column-mode t)
    (phd-modeline-mail-mode t)
    (setq phd-modeline-format
          (list
           '(:eval (phd-modeline-bar))
           '(:eval (phd-modeline-whitespace))
           '(:eval (phd-modeline-buffer-lock-icon))
           '(:eval (phd-modeline-buffer-name))
           '(:eval (phd-modeline-buffer-modified-icon))
           '(:eval (phd-modeline-whitespace))
           '(:eval (phd-modeline-buffer-position))
           '(:eval (phd-modeline-media-info))
           '(:eval (phd-modeline-whitespace))
           '(:eval (phd-modeline-flycheck-status))
           '(:eval (phd-modeline-whitespace 4))
           '(:eval (phd-modeline-vc-icon 1 1 1))
           '(:eval (phd-modeline-vc-status))
           '(:eval (phd-modeline-whitespace 4))
           '(:eval (phd-modeline-mail-icon))
           '(:eval (phd-modeline-mail-status))
           '(:eval (phd-modeline-whitespace))
           '(:eval (phd-modeline-space-between 4))
           '(:eval (phd-modeline-mode-icon))
           '(:eval (phd-modeline-whitespace))
           '(:eval (phd-modeline-major-mode))
           '(:eval (phd-modeline-whitespace)))))

#+end_src

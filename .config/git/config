[core]
  excludesfile = ~/.config/git/ignore        # global gitignores
  attributesfile = ~/.config/git/attributes  # global gitattributes
  trustctime = false  # make git rebase safer

[alias]
  aliases = config --get-regexp alias
  s = status -s  # a brief status summary
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"  # diff between last commit and current state
  b = branch -a
  l = log --pretty=oneline --abbrev-commit -12
  lg = log --pretty=oneline --abbrev-commit
  r = remote -v
  rau = remote add upstream
  fu = git fetch upstream
  c = commit -avm
  cm = commit -m
  ca = !"f() { DEFAULT_MSG=\"Update\"; git for-each-ref --shell --format='ref=%(refname:short)' refs/heads | while read entry; do eval \"$entry\" && git checkout $ref && git pull && if [ -z \"$cherryco\" ]; then git commit -m \"${1-$DEFAULT_MSG}\" && cherryco=\"$(git rev-parse --verify HEAD)\"; else git cherry-pick $cherryco; fi; done; }; f"
  pa = !"f() { git for-each-ref --shell --format='ref=%(refname:short)' refs/heads | while read entry; do eval \"$entry\" && git checkout $ref && git pull && git push; done; }; f"
  ac = !git add -A && git commit -avm
  aml = !git add -A && git commit --amend --no-edit
  undo = reset HEAD~
  ex = update-index --assume-unchanged
  nex = update-index --no-assume-unchanged

[help]
  autocorrect = 1  # automatically correct misspelled commands

[diff]
  renames = copies  # detect copies and renames
[diff "pdf"]
  textconv = pdfinfo  # use pdfinfo to do pdf git diff
[diff "zip"]
  textconv = unzip -v
[diff "bin"]
  textconv = hexdump -v -C  # use hexdump to do binary git diff


# [commit]
#   gpgsign = true

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true

[pull]
	rebase = false

[include]
  path = themes/phd-ark-default.gitcolor

[user]
	name = phdenzel
	email = phdenzel@gmail.com
	signingkey = 629FC7317EFB4935
[credential]
	helper = cache
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

# -*- mode: Shell-script;-*-
####################################################### Shell functions
append_path() {
    while [ $# -ge 1 ]; do
        if [ ! -d "$1" ]; then
            shift
        else
            case ":$PATH:" in
                *:"$1":*)
                ;;
                *)
                    PATH="${PATH:+$PATH:}$1"
                    ;;
            esac
            shift
        fi
    done
}

prepend_path() {
    while [ $# -ge 1 ]; do
        if [ ! -d "$1" ]; then
            shift
        else
            case ":$PATH:" in
                *:"$1":*)
                ;;
                *)
                    PATH="$1${PATH:+:$PATH}"
                    ;;
            esac
            shift
        fi
    done
}

add_manpath() {
    while [ $# -ge 1 ]; do
        if [ ! -d "$1" ]; then
            shift
        else
            case ":$MANPATH:" in
                *:"$1":*)
                ;;
                *)
                    MANPATH="$1${MANPATH:+:$MANPATH}"
                    ;;
            esac
            shift
        fi
    done
}

# Determine size of a file or total size of a directory
fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}
# UTF-8 encode a unicode string
escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
	# print a new line unless there is a pipe to another program
	if [ -t 1 ]; then
		echo "";
	fi;
}
# Decode Unicode escape sequences
unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
	# print a new line unless there is a pipe to another program
	if [ -t 1 ]; then
		echo "";
	fi;
}
# Get a characterâ€™s Unicode code point
codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
	# print a new line unless there is a pipe to another program
	if [ -t 1 ]; then
		echo "";
	fi;
}

# Merge pdfs (bigger filesize or highly compressed)
# Note: if links are not preserved try adding -dPrinted=false
pdfmerge_x() {
    gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -dPDFSETTINGS=/default -sOutputFile=$@
}

pdfmerge() {
    gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/default -dNOPAUSE -dQUIET -dBATCH -dDetectDuplicateImages -dCompressFonts=true -r150 -sOutputFile=$@
}

# Fuzzy-find magic
open_with_fzf() {
    fd -t f -H -I | fzf -m --preview="xdg-mime query default {}" | xargs -ro -d "\n" xdg-open 2>&-
}

cd_with_fzf() {
    cd $HOME && cd "$(fd -t d | fzf --preview="tree -L 1 {}" --bind="space:toggle-preview" --preview-window=:hidden)"
}

pacs() {
    sudo pacman -Syy $(pacman -Ssq | fzf -m --preview="pacman -Si {}" --preview-window=:hidden --bind=space:toggle-preview)
}

countdown() {
    start="$(( $(date '+%s') + $1))"
    while [ $start -ge $(date +%s) ]; do
        time="$(( $start - $(date +%s) ))"
        printf '%s\r' "$(date -u -d "@$time" +%H:%M:%S)"
        sleep 0.1
    done
    unset time;
    unset start;
}

stopwatch() {
    start=$(date +%s)
    while true; do
        time="$(( $(date +%s) - $start))"
        printf '%s\r' "$(date -u -d "@$time" +%H:%M:%S)"
        sleep 0.1
    done
    unset time;
    unset start;
}

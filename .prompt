#!/bin/bash
####################################################### Bash prompt
# Note: color variables have to been defined in .exports
#       and thus .exports has to be sourced before this file
#
# prefer Terminal xterm-256color
if infocmp xterm-256color >/dev/null 2>&1; then
    export TERM='xterm-256color';
elif [[ $COLORTERM = gnome-* && $TERM = xterm* ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
fi;
# Function that returns git branch name and status
# in the colors whcih can be given as arguments
git2prompt () { # {1}: path separator + branch color; {2}: status sign color
    local sign='';
    local gitBranch='';
    # Check if cwd is Git repository
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") \
	           == '0' ]; then
	      # Check if cwd is in .git before doing git checks
	      if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" \
		             == 'false' ]; then
	          # Ensure the index is up to date
	          git update-index --really-refresh -q &>/dev/null;
	          # Uncommited changes
	          if ! $(git diff --quiet --ignore-submodules --cached); then
		            sign+='+';
	          fi;
	          # Unstaged changes
	          if ! $(git diff-files --quiet --ignore-submodules --); then
		            sign+='!';
	          fi;
	          # Untracked changes
	          if [ -n "$(git ls-files --others --exclude-standard)" ]; then
		            sign+='?';
	          fi;
	          # Stashed files
	          if $(git rev-parse --verify refs/stash &>/dev/null); then
		            sign+='$';
	          fi;
	      fi;
	      # Get the branch name (short symbolic ref from HEAD otherwise SHA)
	      branch="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
		        git rev-parse --short HEAD 2> /dev/null || \
		        echo '(unknown)')";
	      [ -n "${sign}" ] && sign="[${sign}]";
	      # Return/echo branch name and status
	      echo -e "${1}${branch}${2}${sign}";
    else # if not in a git repository
	      return;
    fi;
}
# Is the USER logged in as root ?
if [[ "${USER}" == "root" ]]; then
    userColor="${red}";
else
    userColor="${magenta}";
fi;
# Is the user logged in on an SSHHOST ?
if [[ "${SSH_TTY}" ]]; then
    #hostColor="${bold}${purple}"
    hostColor="${bold}${blue}"
else
    #hostColor="${purple}"
    hostColor="${blue}"
fi;
# First prompt
PS1="\[${userColor}\]\u";  # username
PS1+="\[${reset}\]@";      # at
PS1+="\[${hostColor}\]\h"; # hostname
PS1+="\[${reset}\]:";      # in
PS1+="\[${green}\]\w";     # working directory path
PS1+="\$(git2prompt \"\[${reset}\]#\[${orange}\]\" \"\[${purple}\]\")";
                           # with git info if any
PS1+="\[${reset}\]\$ ";    # color reset and $-sign
export PS1;
# Second prompt
PS2="\[${orange}\]â†’ \[${reset}\]";
export PS2;

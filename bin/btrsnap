#!/bin/bash
# btrsnap #########
# @author: phdenzel

PROGNAME=$(basename $0)

# Variables and default values (can be set in env)
BTRSNAP_CONF=${BTRSNAP_CONF:-"$HOME/.config/btrsnap/btrsnap.conf"}
BTRSNAP_LOG=${BTRSNAP_LOG:-"$HOME/.config/btrsnap/btrsnap.log"}
BTRSNAP_BASEDIR=${BTRSNAP_BASEDIR:-"/snapshots"}
BTRSNAP_TIMEFORMAT=${BTRSNAP_TIMEFORMAT:-"+%y%m%d-%H:%M:%S"}
BTRSNAP_SRC=${BTRSNAP_SRC:-"/"}
BTRSNAP_TARGET=${BTRSNAP_TARGET:-"root"}


### main help  
sub_help() {
    echo "Usage: $PROGNAME <subcommand> [options]"
    echo ""
    echo "Subcommands:"
    echo "    l(ist) [options]: NotYetImplemented"
    echo "        - List all snapshots"
    echo ""
    echo "    c(reate) [options] <src> [target]"
    echo "        - Create a snapshot in the target directory"
    echo ""
    echo "    d(iff) <snapshot-a> [snapshot-b]: NotYetImplemented"
    echo "        - Show diffs between two snapshots"
    echo ""
    echo "    u(ndo) <snapshot> <file>: NotYetImplemented"
    echo "        - Undo changes to a specific file from a snapshot"
    echo ""
    echo "    s(crub) [options]: NotYetImplemented"
    echo "        - Clean up snapshots"
    echo ""
    echo "    r(estore) [options]: NotYetImplemented"
    echo "        - Restore the filesystem to a former snapshot"
    echo ""
    echo "For help with each subcommand run:"
    echo "    $PROGNAME <subcommand> -h|--help"
    echo ""
}


### btrsnap list

### btrsnap create
sub_create() {
    # Parse subcommand options and arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            "-h" | "--help")
                echo "Usage: $PROGNAME-create [options] <source> [target]"
                echo ""
                echo "Create a snapshot of a source btrfs subvolume <source> (default: '/')"
                echo "in the target directory <target> (default: '$BTRSNAP_BASEDIR/$BTRSNAP_TARGET/')"
                echo ""
                echo "-h|--help      Display this help text"
                echo ""
                echo "-b|--basedir   Change the $PROGNAME base directory (default: $BTRSNAP_BASEDIR')"
                echo ""
                echo "-f|--format    Specify the time-format of the snapshot"
                echo "               Default: %y%m%d-%H:%M:%S"
                echo "               Other possible formats are: iso-8601=seconds, iso-8601=ns,"
                echo "                                           rfc-3339=seconds, rfc-3339=ns"
                echo ""
                echo "-m|--message   Write a descriptive message with the snapshot to "
                echo "               $BTRSNAP_LOG"
                echo ""
                exit 0
                ;;
            "-b" | "--basedir")
                shift
                BTRSNAP_BASEDIR="$1"
                shift
                ;;
            "-f" | "--format")
                shift
                case $1 in
                    "iso-8601=seconds" | "iso-8601=ns" | "rfc-3339=seconds" | "rfc-3339=ns")
                        BTRSNAP_TITLE="$(date --$1)"
                        shift
                        ;;
                    *)
                        BTRSNAP_TITLE="$(date +$1)"
                        shift
                        ;;
                esac
                ;;
            "-m" | "--message")
                echo "TODO"
                shift
                ;;
            *)
                BTRSNAP_SRC=${1:-"/"}
                shift
                BTRSNAP_TARGET=${1:-"root"}
                shift
                ;;
        esac
    done
    [ -z "$BTRSNAP_TITLE" ] && BTRSNAP_TITLE=$(date $BTRSNAP_TIMEFORMAT)
    [ -z "$BTRSNAP_SRC" ] && BTRSNAP_SRC="/";
    [ -z "$BTRSNAP_TARGET" ] && BTRSNAP_TARGET="root"
    if [ ! -d "$BTRSNAP_TARGET" ]; then
        BTRSNAP_TARGET=$BTRSNAP_BASEDIR/$BTRSNAP_TARGET/$BTRSNAP_TITLE
    else
        BTRSNAP_TARGET=$BTRSNAP_TARGET/$BTRSNAP_TITLE
    fi;
    # mkdir -p "$(dirname $BTRSNAP_TARGET)";
    echo -e "btrsnap-create:\t"$BTRSNAP_SRC "->" $BTRSNAP_TARGET
    
}

sub_c() {
    sub_create $@;
}


### btrsnap diff
sub_diff() {
    echo "Running 'diff' command."
    # btrfs send --no-data -p $SHAPSHOT_OLD $SHAPSHOT_NEW | btrfs receive --dump | grep ^update_extent
}

sub_d() {
    sub_diff $@;
}


### btrsnap scrub
sub_scrub() {
    echo "Running 'scrub' command."
}

sub_s() {
    sub_scrub $@;
}


# Main
SUBCMD=$1
case $SUBCMD in
    "-h" | "--help")
        sub_help
        exit 0
        ;;
    *)
        shift
        sub_${SUBCMD} $@
        if [ $? = 127 ]; then
            echo "Error: '$SUBCMD' is not a known subcommand." >&2
            echo "       Run '$PROGNAME --help' for a list of known subcommands." >&2
            exit 1
        fi
        ;;
esac

#!/bin/bash
# btrsnap #########
# @author: phdenzel
# 
# This programs works with optional flags and environment variables:
#     BTRSNAP_CONF, BTRSNAP_LOG, BTRSNAP_BASEDIR, BTRSNAP_SRC, BTRSNAP_TARGET,
#     BTRSNAP_MODE, BTRSNAP_WRITABLE, BTRSNAP_TIMEFORMAT, BTRSNAP_WARNINGS
# Recommended use:
#     Export BTRSNAP_CONF in your .bashrc pointing to an existing file where
#     you configure btrsnap to your specifications.
# TODO:
#     - add indices to snapshots for ease-of-input
#     - add readable/writeable status to log/listing
#     - finish the rest

PROGNAME=$(basename $0)

# Variables and default values (can be set in env)
BTRSNAP_CONF=${BTRSNAP_CONF:-".$PROGNAME/$PROGNAME.conf"}
[ -f "$BTRSNAP_CONF" ] && source $BTRSNAP_CONF
BTRSNAP_BASEDIR=${BTRSNAP_BASEDIR:-"/snapshots"}
BTRSNAP_LOG=${BTRSNAP_LOG:-".$PROGNAME/$PROGNAME.log"}
BTRSNAP_SRC=${BTRSNAP_SRC:-'/'}
BTRSNAP_TARGET=${BTRSNAP_TARGET:-"root"}
BTRSNAP_MODE=${BTRSNAP_MODE:-"manual"}
BTRSNAP_WRITABLE=${BTRSNAP_WRITABLE:-0}
BTRSNAP_TIMEFORMAT=${BTRSNAP_TIMEFORMAT:-"+%y%m%dT%H:%M:%S.%2N"}
BTRSNAP_WARNINGS=${BTRSNAP_WARNINGS:-1}
DRY_RUN=${DRY_RUN:-0}
VERBOSE=${VERBOSE:-0}

# Constants
BTRSNAP_LOG_COLUMNS='#,Snapshot,Source,Time,Flags,Mode,Description'



### Help functions
sub_help() {
    echo "Usage: $PROGNAME <subcommand> [options]"
    echo ""
    echo "Subcommands:"
    echo "    e(nv)"
    echo "        - Print all environment variables"
    echo ""
    echo "    l(ist) [options] <source>"
    echo "        - List all snapshots (and corrects logs if they are out-of-date)"
    echo ""
    echo "    i(nfo) [options] [snapshot]"
    echo "        - Print info about specific snapshot (alias for btrfs subvol show)"
    echo ""
    echo "    c(reate) [options] [src] [target]"
    echo "        - Create a snapshot in the target directory"
    echo ""
    echo "    d(iff) [options] [snapshot-a] [snapshot-b]"
    echo "        - Show diffs between two snapshots"
    echo ""
    echo "    r(e)m(ove) [options] [snapshot]"
    echo "        - Delete targeted snapshots"
    echo ""
    echo "    s(crub) [options] [target]: NotYetImplemented"
    echo "        - Scrub/remove unimportant snapshots"
    echo ""
    echo "    u(ndo) <snapshot> <file>: NotYetImplemented"
    echo "        - Undo changes to a specific file from a snapshot"
    echo ""
    echo "    r(estore) [options]: NotYetImplemented"
    echo "        - Restore the filesystem to a former snapshot"
    echo ""
    echo "For help with each subcommand run:"
    echo "    $PROGNAME <subcommand> -h|--help"
    echo ""
    echo "The current basedir for $PROGNAME is BTRSNAP_BASEDIR=$BTRSNAP_BASEDIR"
    echo "If arguments are given as relative paths, the BTRSNAP_BASEDIR variable"
    echo "is used as base path, otherwise it is ignored."
    echo ""
    echo "$PROGNAME configuration and logs are in"
    echo "    - $BTRSNAP_CONF"
    echo "    - $BTRSNAP_LOG"
    echo ""
}

list_help() {
    echo "Usage: $PROGNAME-list [options] <source>"
    echo ""
    echo "List all $PROGNAME snapshots of a btrfs subvolume <source> (default: '/')"
    echo ""
    echo "-h, --help     Display this help text"
    echo ""
    echo "-v, --verbose  Print action info to the command-line"
    echo ""
    echo "-n, --dry-run  Run command, but perform no actions"
    echo ""
    echo "-s, --simple   Print the list simply, with paths only"
    echo ""
    echo "-t, --table    Print the list in table mode"
    echo ""
    echo "-c, --column   Print the list as columns (default)"
    echo "               deprecated: kept for backwards compatibility"
    echo ""
    echo "-b, --basedir <path>"
    echo "               Change the $PROGNAME base directory (default: $BTRSNAP_BASEDIR')"
    echo ""
    echo "--mode <integer>"
    echo "               Mode in which the snapshot is created"
    echo "               0:manual; 1:hourly; 2:daily; 3:monthly; 4:yearly"
    echo ""
}

info_help() {
    echo "Usage: $PROGNAME-info [options] <source>"
    echo ""
    echo "Show info of any btrfs <subvolume> (default: '/') or <snapshot index>"
    echo "(wrapper for btrfs subvolume show)"
    echo ""
    echo "-h, --help     Display this help text"
    echo ""
    echo "-v, --verbose  Print action info to the command-line"
    echo ""
    echo "-n, --dry-run  Run command, but perform no actions"
    echo ""
    echo "-b, --basedir <path>"
    echo "               Change the $PROGNAME base directory (default: $BTRSNAP_BASEDIR')"
    echo ""
    echo ""
}

create_help() {
    echo "Usage: $PROGNAME-create [options] <source> [target]"
    echo ""
    echo "Create a snapshot of a source btrfs subvolume <source> (default: '/')"
    echo "in the target directory <target> (default: '$BTRSNAP_BASEDIR/$BTRSNAP_TARGET/')"
    echo ""
    echo "-h, --help     Display this help text"
    echo ""
    echo "-v, --verbose  Print action info to the command-line"
    echo ""
    echo "-n, --dry-run  Run command, but perform no actions"
    echo ""
    echo "-b, --basedir <path>"
    echo "               Change the $PROGNAME base directory (default: $BTRSNAP_BASEDIR')"
    echo ""
    echo "-w, --writable"
    echo "               Make the snapshot writable"
    echo ""
    echo "-f, --format <format>"
    echo "               Specify the time-format of the snapshot"
    echo "               Default: %y%m%d-%H:%M:%S"
    echo "               Other possible formats are: iso-8601=seconds, iso-8601=ns,"
    echo "                                           rfc-3339=seconds, rfc-3339=ns"
    echo ""
    echo "-m, --message <string>"
    echo "               Write a descriptive message with the snapshot to "
    echo "               $BTRSNAP_BASEDIR/$BTRSNAP_LOG"
    echo ""
    echo "--mode <integer>"
    echo "               Mode in which the snapshot is created"
    echo "               0:manual; 1:hourly; 2:daily; 3:monthly; 4:yearly"
    echo ""
}

diff_help() {
    echo "Usage: $PROGNAME-diff [options] <snapshot-a> <snapshot-b>"
    echo ""
    echo "Show differences between a snapshot and another one"
    echo ""
    echo "-h, --help     Display this help text"
    echo ""
    echo "-v, --verbose  Print action info to the command-line"
    echo ""
    echo "-f, --file     Show line changes of a specific file in the snapshots"
    echo ""
    echo "-b, --basedir <path>"
    echo "               Change the $PROGNAME base directory (default: $BTRSNAP_BASEDIR')"
    echo ""
}

remove_help() {
    echo "Usage: $PROGNAME-remove [options] [snapshot]"
    echo ""
    echo "Delete targeted snapshot"
    echo ""
    echo "-h, --help     Display this help text"
    echo ""
    echo "-v, --verbose  Print action info to the command-line"
    echo ""
    echo "-n, --dry-run  Run command, but perform no actions"
    echo ""
    echo "-b, --basedir <path>"
    echo "               Change the $PROGNAME base directory (default: $BTRSNAP_BASEDIR')"
    echo ""
}


### Utility functions
is-btrfs-subvolume() {
    # Check whether input is a btrfs subvolume
    # Args: path
    btrfs subvolume show $1 &>/dev/null;
}

btrsnap-alist() {
    # Usage: declare -A <alist-name> && btrsnap-alist <alist-name>
    # Note: Do not use alist as <alist-name>!
    local data
    declare -n alist="$1"
    [ ! -f  $BTRSNAP_LOG ] && return 0
    data="$(cat $BTRSNAP_LOG)"
    btrsnap_paths=($(echo "$data" | awk -F' --- ' '{print $1}'))
    N="${#btrsnap_paths[@]}"
    for i in $(seq 1 $N); do
        alist["$i"]="${btrsnap_paths[$((i-1))]}"
    done
}

reverse-alist() {
    # Usage: declare -A <revlist-name> && reverse-alist <revlist-name> <alist-name>
    # Note: Do not use revlist as <revlist-name>!
    declare -n revlist="$1"
    declare -n alist="$2"
    for i in "${!alist[@]}"; do
        revlist["${alist[$i]}"]="$i"
    done
}


### Log functions
load-logs() {
    # Args: BTRSNAP_LOG
    BTRSNAP_LOG="$1"
    declare -A snapshots && btrsnap-alist snapshots
    declare -A snapshot_index && reverse-alist snapshot_index snapshots
    while IFS='' read -r line; do
        path=$(echo "$line" | awk -F' --- ' '{print $1}')
        index="${snapshot_index[$path]}"
        echo "$index --- $line"
    done < "$BTRSNAP_LOG"
}

validate-logs() {
    # Check if logs have snapshot entries which already have been deleted
    # and amend any missing entries
    # Args: LOG_DATA, CONTROL
    # Sets: LOG_DATA, is_deleted, is_healed
    local data
    # delete non-existent logs, issue a warning, and rewrite log file
    data="$(echo "$1" | \
                awk -F ' --- ' -v delta=0 -v ctlFile="$2" \
                    '{if (ctlFile ~ substr($1,2)) {print $0} else {delta=1}}
                     END{print delta}')"
    LOG_DATA=$(echo -e "${data[@]:0:${#data[@]}-2}")
    is_deleted=$(echo -e "${data[@]: -1}")
    [ "$is_deleted" -eq 1 ] && [ "$BTRSNAP_WARNINGS" -eq 1 ] && \
        echo "Warning! Some entries in $BTRSNAP_LOG don't exist anymore." &&
        echo "Purging the logs..."
    [ $DRY_RUN -eq 1 ] || {
        [ "$is_deleted" -eq 1 ] && echo "$LOG_DATA" > $BTRSNAP_LOG
    }
    # write unknown snapshots to log file and issue a warning
    is_healed=0
    heal-logs "$LOG_DATA" "$2"  # sets LOG_DATA, is_healed
    [ "$is_healed" -eq 1 ] && [ "$BTRSNAP_WARNINGS" -eq 1 ] && \
        echo "Warning! There are snapshots missing in the logs." &&
        echo "Trying to amend missing entries..."
    [ $DRY_RUN -eq 1 ] || {
        [ "$is_healed" -eq 1 ] && echo "$LOG_DATA" > $BTRSNAP_LOG
    }
}

heal-logs() {
    # Integrate external snapshots into the logs
    # Args: LOG_DATA, CONTROL
    # Sets: LOG_DATA, is_healed
    logs=""
    snapshots=($(echo "$2" | awk -F 'path' '/path/{gsub(/@/,"/"); print $2}'))
    is_healed=0
    # go through all snapshots and amend log entries if necessary
    for s in "${snapshots[@]}"; do
        if [[ $1 == *$s* ]]; then
            entry="$(echo "$1" | grep "$s" )"
            logs+="\n$entry"
        else
            is_healed=1
            info="$(btrfs subvolume show $s)"
            spath="$s"
            parent_uuid="$(echo "$info" | \
                              awk -F'UUID:' \
                                  '/Parent UUID/{gsub(/^[ \t\r\n]+/,"",$2); 
                                                 print $2}')"
            sroot="$(echo $(btrfs subvolume list -u / | \
                               grep "$parent_uuid" | \
                               awk -F 'path' '/path/{gsub(/@/,"/"); printf "%s", $2}'))"
            stime="$(echo "$info" | \
                        awk -F'time:' \
                            '/Creation time/{gsub(/^[ \t\r\n]+/,"",$2); 
                                             print $2}')"
            sflags="$(echo "$info" | \
                        awk -F'Flags:' \
                            '/Flags/{gsub(/^[ \t\r\n]+/,"",$2); 
                                     if ($2=="readonly") {print "r"} else {print "rw"}}')"
            smode="manual"
            sdescription="External snapshot"
            logs+="\n$spath --- $sroot --- $stime --- $sflags --- $smode --- $sdescription"
        fi
    done;
    LOG_DATA="$(echo -e "${logs[@]:2}")"
}

filter-logs() {
    # Filter logs according to requested output format and selected mode
    # Args: LOG_DATA, BTRSNAP_SRC, OUTPUT_FORMAT, WRITABLE, MODE
    # Sets: LOG_DATA
    # replace separator with single character comma
    LOG_DATA="$(echo "$1" | \
                awk -F' --- ' \
                    '{fmt="%s"; for(i=2;i<=NF;i++){fmt=fmt",%s"}; fmt=fmt"\n";
                      printf(fmt, $1, $2, $3, $4, $5, $6, $7)}')"
    # source filter
    LOG_DATA="$(echo "${LOG_DATA}" | \
                   awk -F',' -v source="$2"\
                       '{if ($3==source) {print $0}}')"
    # --simple
    [ "$3" -lt 0 ] && \
        LOG_DATA="$(echo "${LOG_DATA}" | awk -F',' '{printf("%s\n", $2)}')" && \
        BTRSNAP_LOG_COLUMNS=''
    # --readonly
    [ "$4" -eq 0 ] &&
        LOG_DATA="$(echo "${LOG_DATA}" | \
                    awk -F',' \
                        '{if ($5=="r") {print $0} }')"
    # --mode filter
    [ "$BTRSNAP_MODE" = 'all' ] ||
        LOG_DATA="$(echo "${LOG_DATA}" | \
                    awk -F',' -v mode="$5" \
                        '{if ($6==mode) {print $0} }')"
}

print-logs() {
    # Print the log data in the specified format
    # Args: LOG_DATA, OUTPUT_FORMAT
    HEIGHT="$(echo "$1" | wc -l)"
    HEADER_LINE=0
    FOOTER_LINE=0
    LINE=""
    TITLES="--table-columns=${BTRSNAP_LOG_COLUMNS}"
    [ "$2" -lt 0 ] && OUTPUT_SEP=" " && TITLES=""
    case $2 in
        0)
            OUTPUT_SEP="  "
            ;;
        1)
            OUTPUT_SEP=" │ "
            HEADER_LINE=1
            FOOTER_LINE=1
            ;;
    esac
    OUTPUT="$(echo "$1" | column -t -s ',' -o "$OUTPUT_SEP" $TITLES)"
    WIDTH="$(echo "$OUTPUT" | wc -L)"
    [ "$WIDTH" -gt 1 ] && LINE="$(printf '─%.0s' $(seq 1 ${WIDTH}))"
    # print out data
    [ "$HEADER_LINE" -eq 1 ] && echo "$LINE"
    echo "$OUTPUT"
    [ "$FOOTER_LINE" -eq 1 ] && echo "$LINE"
}


### btrsnap env
sub_env() {
    # Print out environment variables
    echo "# $PROGNAME"
    echo -e "BTRSNAP_BASEDIR:   \t$BTRSNAP_BASEDIR"
    echo -e "BTRSNAP_CONF:      \t$BTRSNAP_CONF"
    echo -e "BTRSNAP_LOG:       \t$BTRSNAP_LOG"
    echo -e "BTRSNAP_SRC:       \t$BTRSNAP_SRC"
    echo -e "BTRSNAP_TARGET:    \t$BTRSNAP_TARGET"
    echo -e "BTRSNAP_TIMEFORMAT:\t$BTRSNAP_TIMEFORMAT"
    echo -e "BTRSNAP_WARNINGS:  \t$BTRSNAP_WARNINGS"
    echo -e "DRY_RUN:           \t$DRY_RUN"
    echo -e "VERBOSE:           \t$VERBOSE"
}

sub_e() {
    sub_env "$@";
}


### btrsnap list
sub_list() {
    OUTPUT_FORMAT=0
    BTRSNAP_WRITABLE=1
    BTRSNAP_MODE="all"
    # Parse subcommand options and arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            "-h" | "--help")
                list_help
                exit 0
                ;;
            "-v" | "--verbose")
                VERBOSE=1
                shift
                ;;
            "-n" | "--dry-run")
                DRY_RUN=1
                shift
                ;;
            "-s" | "--simple")
                OUTPUT_FORMAT=-1
                shift
                ;;
            "-t" | "--table")
                OUTPUT_FORMAT=1
                shift
                ;;
            "-c" | "--column")
                OUTPUT_FORMAT=0
                shift
                ;;
            "-b" | "--basedir")
                shift
                if [[ ! $1 = /* ]]; then
                    BTRSNAP_BASEDIR=$(pwd)/$1
                else
                    BTRSNAP_BASEDIR="$1"
                fi
                shift
                ;;
            "-r" | "--readonly")
                BTRSNAP_WRITABLE=0
                shift
                ;;
            "--mode")
                shift
                case $1 in
                    0) BTRSNAP_MODE='manual';;
                    1) BTRSNAP_MODE='hourly';;
                    2) BTRSNAP_MODE='daily';;
                    3) BTRSNAP_MODE='monthly';;
                    4) BTRSNAP_MODE='yearly';;
                esac
                shift
                ;;
            *)
                BTRSNAP_SRC=${1:-'/'}
                shift
                ;;
        esac
    done
    # sanatize defaults
    [[ ! $BTRSNAP_CONF = /* ]] && [ ! -f "$BTRSNAP_CONF" ] && \
        BTRSNAP_CONF=$BTRSNAP_BASEDIR/$BTRSNAP_CONF
    [[ ! $BTRSNAP_LOG = /* ]] && [ ! -f "$BTRSNAP_LOG" ] && \
        BTRSNAP_LOG=$BTRSNAP_BASEDIR/$BTRSNAP_LOG
    # print out info
    [ "$VERBOSE" -eq 1 ] && echo -e "Config:\t$BTRSNAP_CONF"
    [ "$VERBOSE" -eq 1 ] && echo -e "Log:   \t$BTRSNAP_LOG"
    # create files if necessary
    [ ! -f "$BTRSNAP_CONF" ] && \
        mkdir -p "$(dirname $BTRSNAP_CONF)" && touch $BTRSNAP_CONF
    [ ! -f "$BTRSNAP_LOG" ] && \
        mkdir -p "$(dirname $BTRSNAP_LOG)" && touch $BTRSNAP_LOG
    # validate, filter, and print logs
    CONTROL="$(btrfs subvolume list -s /)"
    LOG_DATA="$(cat $BTRSNAP_LOG)"
    validate-logs "$LOG_DATA" "$CONTROL"
    LOG_DATA="$(load-logs $BTRSNAP_LOG)"
    filter-logs "$LOG_DATA" "$BTRSNAP_SRC" "$OUTPUT_FORMAT" "$BTRSNAP_WRITABLE" "$BTRSNAP_MODE"
    print-logs "$LOG_DATA" "$OUTPUT_FORMAT"
}

sub_l() {
    sub_list "$@";
}


### btrsnap info
sub_info() {
    # Parse subcommand options and arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            "-h" | "--help")
                info_help
                exit 0
                ;;
            "-v" | "--verbose")
                VERBOSE=1
                shift
                ;;
            "-n" | "--dry-run")
                DRY_RUN=1
                shift
                ;;
            "-b" | "--basedir")
                shift
                if [[ ! $1 = /* ]]; then
                    BTRSNAP_BASEDIR=$(pwd)/$1
                else
                    BTRSNAP_BASEDIR="$1"
                fi
                shift
                ;;
            *)
                ARG="$1"
                shift
                ;;
        esac
    done
    # sanatize defaults
    [[ ! $BTRSNAP_CONF = /* ]] && [ ! -f "$BTRSNAP_CONF" ] && \
        BTRSNAP_CONF=$BTRSNAP_BASEDIR/$BTRSNAP_CONF
    [[ ! $BTRSNAP_LOG = /* ]] && [ ! -f "$BTRSNAP_LOG" ] && \
        BTRSNAP_LOG=$BTRSNAP_BASEDIR/$BTRSNAP_LOG
    # print out info
    [ "$VERBOSE" -eq 1 ] && echo -e "Config:\t$BTRSNAP_CONF"
    [ "$VERBOSE" -eq 1 ] && echo -e "Log:   \t$BTRSNAP_LOG"
    [ -z "$ARG" ] && ARG='/'
    declare -A snapshots && btrsnap-alist snapshots
    [ "${snapshots[$ARG]}" ] && ARG="${snapshots[$ARG]}"
    btrfs subvolume show "$ARG";
}

sub_i() {
    sub_info "$@";
}


### btrsnap create
sub_create() {    
    # Parse subcommand options and arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            "-h" | "--help")
                create_help
                exit 0
                ;;
            "-v" | "--verbose")
                VERBOSE=1
                shift
                ;;
            "-n" | "--dry-run")
                DRY_RUN=1
                shift
                ;;
            "-b" | "--basedir")
                shift
                if [[ ! $1 = /* ]]; then
                    BTRSNAP_BASEDIR=$(pwd)/$1
                else
                    BTRSNAP_BASEDIR="$1"
                fi
                shift
                ;;
            "-w" | "--writable")
                BTRSNAP_WRITABLE=1
                shift
                ;;
            "-f" | "--format")
                shift
                case $1 in
                    "iso-8601=seconds" | "iso-8601=ns" | "rfc-3339=seconds" | "rfc-3339=ns")
                        BTRSNAP_TITLE="$(date --$1)"
                        shift;;
                    *)
                        BTRSNAP_TITLE="$(date +$1)"
                        shift;;
                esac
                ;;
            "-m" | "--message")
                shift
                BTRSNAP_MESSAGE="$1"
                shift
                ;;
            "--mode")
                shift
                case $1 in
                    -1) BTRSNAP_MODE='manual';;
                    0) BTRSNAP_MODE='manual';;
                    1) BTRSNAP_MODE='hourly';;
                    2) BTRSNAP_MODE='daily';;
                    3) BTRSNAP_MODE='monthly';;
                    4) BTRSNAP_MODE='yearly';;
                esac
                shift
                ;;
            *)
                BTRSNAP_SRC=${1:-'/'}
                shift
                BTRSNAP_TARGET=${1:-"root"}
                shift
                ;;
        esac
    done
    # Sanatize defaults
    [[ ! $BTRSNAP_CONF = /* ]] && [ ! -f "$BTRSNAP_CONF" ] && BTRSNAP_CONF=$BTRSNAP_BASEDIR/$BTRSNAP_CONF
    [[ ! $BTRSNAP_LOG = /* ]] && [ ! -f "$BTRSNAP_LOG" ] && BTRSNAP_LOG=$BTRSNAP_BASEDIR/$BTRSNAP_LOG
    [ -z "$BTRSNAP_TITLE" ] && BTRSNAP_TITLE=$(date $BTRSNAP_TIMEFORMAT)
    [ -z "$BTRSNAP_MESSAGE" ] && BTRSNAP_MESSAGE=""
    [[ ! $BTRSNAP_TARGET = /* ]] && BTRSNAP_TARGET=$BTRSNAP_BASEDIR/$BTRSNAP_TARGET
    BTRSNAP_TARGET=$BTRSNAP_TARGET/$BTRSNAP_TITLE
    [ "$BTRSNAP_WRITABLE" -eq 0 ] && FLAGS="-r" || FLAGS=""
     [ "$BTRSNAP_WRITABLE" -eq 0 ] && BTRSNAP_RW="r" || BTRSNAP_RW="rw"
    BTRSNAP_ENTRY="$BTRSNAP_TARGET --- $BTRSNAP_SRC --- $BTRSNAP_STARTTIME --- $BTRSNAP_RW --- $BTRSNAP_MODE --- $BTRSNAP_MESSAGE"
    # Print out info
    [ "$VERBOSE" -eq 1 ] && echo -e "Config:\t$BTRSNAP_CONF"
    [ "$VERBOSE" -eq 1 ] && echo -e "Log:   \t$BTRSNAP_LOG"
    [ "$VERBOSE" -eq 1 ] && echo -e "Entry: \t$BTRSNAP_ENTRY"
    echo -e "btrsnap-create:\t$BTRSNAP_SRC -> $BTRSNAP_TARGET"
    # Validate info
    is-btrfs-subvolume $BTRSNAP_SRC || {
        echo "btrfs subvolume $BTRSNAP_SRC doesn't exist!";
        exit 1;
    }
    # Actions!
    [ "$DRY_RUN" -eq 1 ] && return 0
    # Create paths and/or files if necessary
    [ ! -f "$BTRSNAP_CONF" ] && \
        mkdir -p "$(dirname $BTRSNAP_CONF)" && touch $BTRSNAP_CONF
    [ ! -f "$BTRSNAP_LOG" ] && \
        mkdir -p "$(dirname $BTRSNAP_LOG)" && touch $BTRSNAP_LOG
    mkdir -p "$(dirname $BTRSNAP_TARGET)";
    # Create snapshot
    btrfs subvolume snapshot $FLAGS $BTRSNAP_SRC $BTRSNAP_TARGET 2>&1 1>/dev/null
    echo "$BTRSNAP_ENTRY" >> $BTRSNAP_LOG
}

sub_c() {
    sub_create "$@";
}


### btrsnap diff
sub_diff() {
    B_IS_CURRENT=0
    # Parse subcommand options and arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            "-h" | "--help")
                diff_help
                exit 0
                ;;
            "-v" | "--verbose")
                VERBOSE=1
                shift
                ;;
            "-f" | "--file")
                shift
                FILE_QUERY=$1
                shift
                ;;
            "-b" | "--basedir")
                shift
                if [[ ! $1 = /* ]]; then
                    BTRSNAP_BASEDIR=$(pwd)/$1
                else
                    BTRSNAP_BASEDIR="$1"
                fi
                shift
                ;;
            *)
                SNAPSHOT_A=${1:-'/'}
                shift
                SNAPSHOT_B=${1:-"0"}
                shift
                ;;
        esac
    done
    # sanatize defaults
    [[ ! $BTRSNAP_CONF = /* ]] && [ ! -f "$BTRSNAP_CONF" ] && BTRSNAP_CONF=$BTRSNAP_BASEDIR/$BTRSNAP_CONF
    [[ ! $BTRSNAP_LOG = /* ]] && [ ! -f "$BTRSNAP_LOG" ] && BTRSNAP_LOG=$BTRSNAP_BASEDIR/$BTRSNAP_LOG
    # handle input as index
    declare -A snapshots && btrsnap-alist snapshots
    indices=("${!snapshots[@]}")
    [ -z "$SNAPSHOT_A" ] && SNAPSHOT_A="${indices[0]}"
    [ -z "$SNAPSHOT_B" ] && SNAPSHOT_B=0
    [ "$SNAPSHOT_B" -eq 0 ] && B_IS_CURRENT=1
    [ "${snapshots[$SNAPSHOT_A]}" ] && SNAPSHOT_A="${snapshots[$SNAPSHOT_A]}"
    [ "${snapshots[$SNAPSHOT_B]}" ] && SNAPSHOT_B="${snapshots[$SNAPSHOT_B]}"
    # resolve absolute paths & create snapshot of current status
    [[ ! $SNAPSHOT_A = /* ]] && SNAPSHOT_A="$BTRSNAP_BASEDIR/$SNAPSHOT_A"
    if [ "$B_IS_CURRENT" -eq 1 ]; then
        SNAPSHOT_B="$BTRSNAP_BASEDIR/current"
        btrfs subvolume snapshot -r / "$SNAPSHOT_B" 2>&1 1>/dev/null;
    else
        [[ ! $SNAPSHOT_B = /* ]] && SNAPSHOT_B="$BTRSNAP_BASEDIR/$SNAPSHOT_B";
    fi
    # show file diff or snapshot diff
    if [ "$FILE_QUERY" ]; then
        echo "diff \"$SNAPSHOT_A/$FILE_QUERY\" \"$SNAPSHOT_B/$FILE_QUERY\""
        diff "$SNAPSHOT_A/$FILE_QUERY" "$SNAPSHOT_B/$FILE_QUERY";
    else
        btrfs send --no-data -p "$SNAPSHOT_A" "$SNAPSHOT_B" | \
            btrfs receive --dump | grep update_extent
    fi;
    # clean up
    [ "$B_IS_CURRENT" -eq 1 ] && \
        btrfs subvolume delete "$SNAPSHOT_B" 2>&1 1>/dev/null;
}

sub_d() {
    sub_diff "$@";
}


### btrsnap remove
sub_remove() {
    BTRSNAP_TARGET=""
    # Parse subcommand options and arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            "-h" | "--help")
                remove_help
                exit 0
                ;;
            "-v" | "--verbose")
                VERBOSE=1
                shift
                ;;
            "-n" | "--dry-run")
                DRY_RUN=1
                shift
                ;;
            "-b" | "--basedir")
                shift
                if [[ ! $1 = /* ]]; then
                    BTRSNAP_BASEDIR=$(pwd)/$1
                else
                    BTRSNAP_BASEDIR="$1"
                fi
                shift
                ;;
            *)
                BTRSNAP_TARGET=$1
                shift
                ;;
        esac
    done
    # Sanatize defaults
    [[ ! $BTRSNAP_CONF = /* ]] && [ ! -f "$BTRSNAP_CONF" ] && BTRSNAP_CONF=$BTRSNAP_BASEDIR/$BTRSNAP_CONF
    [[ ! $BTRSNAP_LOG = /* ]] && [ ! -f "$BTRSNAP_LOG" ] && BTRSNAP_LOG=$BTRSNAP_BASEDIR/$BTRSNAP_LOG
    declare -A snapshots && btrsnap-alist snapshots
    indices=("${!snapshots[@]}")
    [ -z "$BTRSNAP_TARGET" ] || [ "$BTRSNAP_TARGET" -eq -1 ] && BTRSNAP_TARGET="${indices[0]}"
    [ "${snapshots[$BTRSNAP_TARGET]}" ] && BTRSNAP_TARGET="${snapshots[$BTRSNAP_TARGET]}"
    [[ ! $BTRSNAP_TARGET = /* ]] && BTRSNAP_TARGET=$BTRSNAP_BASEDIR/$BTRSNAP_TARGET
    # Print out info
    [ "$VERBOSE" -eq 1 ] && echo -e "Config:\t$BTRSNAP_CONF"
    [ "$VERBOSE" -eq 1 ] && echo -e "Log:   \t$BTRSNAP_LOG"
    echo -e "btrsnap-remove:\t$BTRSNAP_TARGET"
    # Validate info
    is-btrfs-subvolume $BTRSNAP_TARGET || {
        echo "btrfs subvolume $BTRSNAP_TARGET doesn't exist!";
        exit 1;
    }
    # Actions!
    [ "$DRY_RUN" -eq 1 ] && return 0
    # Create paths and/or files if necessary
    [ ! -f "$BTRSNAP_LOG" ] && \
        mkdir -p "$(dirname $BTRSNAP_LOG)" && touch $BTRSNAP_LOG
    # Delete snapshot
    btrfs subvolume delete $BTRSNAP_TARGET 2>&1 1>/dev/null
    sed -i "\|$BTRSNAP_TARGET|d" "$BTRSNAP_LOG"
}

sub_rm() {
    sub_remove "$@";
}


### btrsnap scrub
sub_scrub() {
    echo "Running 'scrub' command."
}

sub_s() {
    sub_scrub "$@";
}


# Main
SUBCMD=$1
case $SUBCMD in
    "-h" | "--help")
        sub_help
        exit 0
        ;;
    *)
        shift
        BTRSNAP_STARTTIME=$(date "+%y-%m-%d %H:%M:%S.%2N %z")
        sub_${SUBCMD} "$@"
        if [ $? = 127 ]; then
            echo "Error: '$SUBCMD' is not a known subcommand." >&2
            echo "       Run '$PROGNAME --help' for a list of known subcommands." >&2
            exit 1
        fi
        ;;
esac

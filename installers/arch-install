# Optional
> setfont ter-120n # or maybe ter-132n
> localectl list-keymaps | grep [US/CH/DE]
> loadkeys de_CH-latin1

### Verify boot mode (EFI vs BIOS/CMS mode)
ls /sys/firmware/efi/efivars   # shows output if in EFI mode

### Internet connection
> ip -c a
> ping archlinux.org

# (optional; if there is no ethernet cable plugged in)
[> iwctl]
[> help]
[> device list]
[> station wlan0 scan]
[> station wlan0 connect-hidden myWLAN]

> timedatectl set-ntp true
> timedatectl status  # to check status

# Set up fastest mirror list
> pacman -Syy
> reflector -c Switzerland -a 6 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
> pacman -Syy

### Disk partitioning/formatting
> lsblk
[> dd if=/dev/urandom of=/dev/sd[a] bs=10M]  # erase all partitions on drive

### BEGIN options: A/B
### A: For UEFI boot: gdisk variant
> gdisk /dev/vda
# EFI system partition
> n
> 1
>
> +1024M
> l
> ef00
# create 2G swap (for less <2G RAM make it bigger)
> n
> 2
> 
> +2G
> 8200
# create root partition
> n
> 3
> 
> +40G
>
# create home partition
> n
> 4
>
>
>
> w
> Y

> lsblk
> mkfs.vfat /dev/vda1 # boot part
> mkswap /dev/vda2    # swap part
> swapon /dev/vda2
> mkfs.ext4 /dev/vda3 # root part
> mkfs.ext4 /dev/vda4 # home part
> lsblk

### B: For UEFI boot: fdisk variant
> fdisk /dev/sd[a]  # sda is an example; choose the right one here
# on modern single-user machines no /swap and no separate /home is needed
> g  # as GPT
> n  # EFI /boot partition
> 1
>
> +1024MB  # choose minimum 512MB
> n  # ROOT / partition
> 2
>
>
> w

> mkfs.fat -F32 /dev/sda1
> mkfs.ext4 /dev/sda2
> lsblk

### C: For legacy boot
> fdisk /dev/sd[a]  # sda is an example; choose the right one here
> n
>
>
>
> +4G
> t
> L
> 82  # swap
> n
>
>
>
> w

> mkswap /dev/sda1
> swapon /dev/sda1
> mkfs.ext4 /dev/sda2
### END options A/B/C

# mount root partition (e.g. /dev/sda3) to /mnt
> mount /dev/sda3 /mnt

> mkdir -p /mnt/{boot/efi,home}
> mount /dev/sda1 /mnt/boot/efi
> mount /dev/sda4 /mnt/home


### Base Install
# for AMD processors use amd-ucode
> pacstrap /mnt base linux linux-firmware intel-ucode git vim
> genfstab -U /mnt >> /mnt/etc/fstab
> cat /mnt/etc/fstab

### Enter Installation
> arch-chroot /mnt

# Create swapfile (only if no swap partition was created)
> dd if=/dev/zero of=/swapfile bs=1M count=512 status=progress
> chmod 600 /swapfile
> mkswap /swapfile
> swapon /swapfile
> nano /etc/fstab
# insert following line
/swapfile none swap defaults 0 0

### Set timezone / language / keymap
> ln -sf /usr/share/zoneinfo/Europe/Zurich /etc/localtime
> hwclock --systohc
> vim /etc/locale.gen
# uncomment following line
en_US.UTF-8 UTF-8
> locale-gen
# insert following line
> vim /etc/locale.conf
LANG=en_US.UTF-8
> vim /etc/vconsole.conf
# insert following line (not necessary on US keyboards)
KEYMAP=de_CH-latin1


### Hostname
> nano /etc/hostname
# insert your hostname [lycan, phoenix, ...]
lycan
> nano /etc/hosts
# insert following lines
127.0.0.1	localhost
::1		localhost
127.0.1.1	lycan.localdomain	lycan

### Password
> passwd
> ******
> ******
### New user
> useradd -m phdenzel
> passwd phdenzel
> *****
> *****
> usermod -aG wheel,audio,video,optical,storage,kvm phdenzel
pacman -S sudo
> EDITOR=vim visudo
# uncomment following line
%wheel ALL=(ALL) ALL


### Bootloader
# minimalistic
> pacman -S grub efibootmgr dosfstools mtools os-prober networkmanager wpa_supplicant dialog base-devel linux-headers git xdg-utils xdg-user-dirs
# or a bit more packages
> pacman -S grub efibootmgr dosfstools mtools os-prober networkmanager network-manager-applet wireless_tools wpa_supplicant dialog mtools dosfstools base-devel linux-headers git bluez bluez-utils cups alsa-utils pulseaudio pulseaudio-bluetooth pavucontrol xdg-utils xdg-user-dirs openssh terminus-font

# For UEFI boot
> grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=grub_uefi --recheck
> grub-mkconfig -o /boot/grub/grub.cfg

# For legacy boot
> grub-install --target=i386-pc /dev/sda
> grub-mkconfig -o /boot/grub/grub.cfg

### Log in to the installed machine as root
> exit
> umount -a
> reboot
### On VMs: if UEFI shell appears, do
# fs0:
# fs0:
# cd EFI
# cd grub_uefi
# grubx64.efi
# for permanent fix, do:
# fs0:
# edit startup.nsh
# add the above lines to the file, save, and exit

### Start essential services
> systemctl start NetworkManager
# (optional; if there is no ethernet cable plugged in)
[> nmtui]
> systemctl enable NetworkManager
> systemctl enable bluetooth
> systemctl enable cups

### Check internet connection
> ip a
> systemctl start sshd

# SSD
> systemctl enable fstrim.timer

#+AUTHOR: Philipp Denzel
#+OPTIONS: num:nil

These are my personal notes on conventions I typically use for an arch
install.  Everything here, I've previously tested and implemented
myself at some point.  Nevertheless, arch has a rolling release scheme
and thus, is constantly changing.  Always consult the installation
guide on the [[https://wiki.archlinux.org/title/installation_guide][arch wiki]] when in doubt, or for troubleshooting.


*** My current setup

    I'm currently using arch on my
    - main desktop machine
      - Asus Strix Z270E
      - Intel i7-7700K(8)@4.5GHz
      - Nvidia GTX 1080Ti
      - btrfs/luks encryption setup
    - MacBookPro 13" (2016)
      - btrfs/luks encryption setup


* Create a bootable medium

  Straight-forward on linux. For other operating systems best consult
  the web.

  On linux, simply copy the iso to the unmounted device, e.g.
  
  #+begin_src shell
    cat ~/Downloads/archlinux-2022.01.01-x86_64.iso > /dev/sde
  #+end_src


*** On partitioned flash drive

    The method above unfortunately only works on the entire drive,
    without preserving already existent paritions. Creating a manually
    partitioned flash drive is a bit more involved.

    Create a partition table and partitions on the USB drive, and
    format them FAT32, for the partition ~/dev/sde1~ for example

    #+begin_src shell
      mkfs.fat -F32 /dev/sde1
    #+end_src

    #+begin_src shell
      sudo mount /dev/sde1 /mnt
      sudo bsdtar -x -f archlinux-2022.01.01-x86_64.iso -C /mnt
      sudo fatlabel /dev/sde1 ARCH_202201
    #+end_src

* Right after boot


**** Optional: ssh into the new machine

     You may install ssh and log in remotely, if that is more comfortable
     for you. However, for this you first have to set the root password

     #+begin_src shell
       pacman -S openssh
       systemctl start sshd  # or alternatively: systemctl enable --now sshd
       passwd
     #+end_src


**** Optional: change keymap and console font
     
     If you use and choose a non-standard, non-US keyboard layout, you
     may load a different one here. E.g., for the Swiss keyboard
     layout

     #+begin_src shell
       localectl list-keymaps | grep CH
       loadkeys de_CH-latin1
     #+end_src

     For your eyesight, it might also be advantageous to use a bigger font

     #+begin_src shell
       setfont ter-132n
     #+end_src


*** Verify boot mode

    These days, it is likely you boot in EFI mode. To verify this, use

    #+begin_src shell
      ls /sys/firmware/efi/efivars
    #+end_src

    If you see any output, you are booted into EFI mode, and you may
    proceed. Otherwise, you may have to change some settings in your
    BIOS or consult the arch wiki for a CMS-mode install guide.


*** Internet connection

    List devices with

    #+begin_src shell
    ip -c a
    #+end_src

    If you use an ethernet connection, everything should already be
    working. To verify this, ping any website you know, e.g.

    #+begin_src shell
      ping -c 3 archlinux.org
    #+end_src


**** Optional: wifi setup
     
     If there is no ethernet cable plugged in, you may have to log
     into a wifi network

     #+begin_src shell
       iwctl
       help
       device list
       station wlan0 scan
       station wlan0 connect-hidden myWLAN
     #+end_src


*** Update mirrorlist

    First, ensure the system clock is accurate
    #+begin_src shell
      timedatectl set-ntp true
      timedatectl status
    #+end_src

    Afterwards, update your mirrorlist for optimal download speeds
    (change specifics for your locale)
    
    #+begin_src shell
      pacman -Syy
      reflector -c Switzerland -a 6 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
      pacman -Syy
    #+end_src


* Disk partitioning and formatting

  Here, you have to make several decisions:

  - Which disk(s) should contain the installation?
    - NVMe devices usually have ~/dev/nvme0n1~, ~/dev/nvme1n1~...
    - SATA devices usually have ~/dev/sda~, ~/dev/sdb~...
  - What partitioning layout do you want to use?
    - a root ~/~ and an EFI system partition ~/boot/efi~ are minimally
      required
    - it is generally advisable to have a separate ~/home~ partition (or
      subvolume), in order to easily reinstall or restore arch without
      any data loss. (Note: it is still possible without a seperate
      home partition, but probably comes with headaches.)
    - a ~swap~ partition is always a good idea, even if you have
      enough RAM, say 64GB ;). The linux kernel moves memory pages
      that are hardly ever used to swap space to ensure that enough
      RAM is available for more frequently used ones. Alternatively,
      you can use swap on zram (see the [[https://aur.archlinux.org/packages/zramd/][zramd]] package on the AUR), if
      you prefer to save disk space.
  - What filesystem do you want to use?
    - most stable and efficient filesystem probably is ~ext4~
    - a more modern filesystem is ~btrfs~. It has advanced features
      such as Copy-on-Write, self-healing, device pooling, and
      nearly-instant snapshotting capabilities (this is what I
      personally find most useful, especially for rolling release
      distributions)

  Note that for optimal long-term performance of older SSD and
  NVMe drives, it is recommended to manually "over-provision"
  (leave some free space). Most drives these days come OP from the
  factory, which is the reason why the capacity of such drives is
  usually lower than advertised.

  #+begin_src shell
    lsblk -o NAME,PATH,FSTYPE,LABEL,FSSIZE,MOUNTPOINT
  #+end_src

  The following subsections use the devices ~/dev/sda~ and ~/dev/sdb~
  as example. Adjust accordingly if you decide to use other devices
  (and naturally choose only one of the following partitioning examples).

  It might also be better (and more secure) to erase/randomize the
  contents of the disk before re-formatting it.

  #+begin_src shell
    dd if=/dev/urandom of=/dev/sda bs=10M
  #+end_src


*** "Classic" partitioning scheme

    The classic partitioning scheme is what most people go for (and
    probably should without other informed reasons/opinions).

    | device | filesystem   | mount point               | size  |
    |--------+--------------+---------------------------+-------|
    | sda1   | ESP   (ef00) | {/mnt}/boot or {/mnt}/efi | +512M |
    | sda2   | swap  (8200) | [SWAP]                    | +4G   |
    | sda3   | linux (8300) | {/mnt}/                   | +64G  |
    | sda4   | linux (8300) | {/mnt}/home               | 100%  |

    If the device is smaller than 1 TB (assumed in the case above),
    then downscale the partitions appropriately, however the ESP needs
    at least 300M and swap at least 512M. I prefer ~/mnt/efi~ as mount
    point for the ESP, but this could create problems for some boot
    managers which look in the ~/boot~ directory. ~grub~ can boot from
    anywhere though (when configured correctly).

    #+begin_src shell
      gdisk /dev/sda
      # generate a GPT table
      > o
      # create a EFI partition
      > n, 1, <Enter>, +512M, ef00
      # create swap partition
      > n, 2, <Enter>, +4G, 8200
      # create root partition
      > n, 3, <Enter>, +64G, <Enter> (or 8300)
      # create home partition
      > n, 4, <Enter>, -16G, <Enter> (or 8300)
      # write scheme to disk and exit
      > w, Y
    #+end_src

    After the partitioning, you're ready to format the partitions and
    mount them (labelling the partitions is not necessary as it's best
    to use the UUID in the filesystem table to mount them, to avoid
    mistakes which could lead to serious data loss).

    #+begin_src shell
      mkfs.fat -F 32 /dev/sda1
      mkswap /dev/sda2
      swapon /dev/sda2
      mkfs.ext4 /dev/sda3
      mkfs.ext4 /dev/sda4
    #+end_src

    Once formatted, create the directories and mount them

    #+begin_src shell
      mount /dev/sda3 /mnt
      mkdir -p /mnt/{boot,home}
      mount /dev/sda4 /mnt/home
      mount /dev/sda1 /mnt/boot  # or /mnt/efi
    #+end_src


*** btrfs partitioning scheme - unencrypted

    My preferred partitioning scheme for a btrfs system is

    | device | filesystem   | mount point               | size  |
    |--------+--------------+---------------------------+-------|
    | sda1   | EFI   (ef00) | {/mnt}/boot or {/mnt}/efi | +512M |
    | sda2   | swap  (8200) | [SWAP]                    | +4G   |
    | sda3   | linux (8300) | {/mnt}/                   | 100%  |
    | sdb    | -            |                           | 100%  |

    Again, adjust the sizes if your drives are smaller (EFI needs at
    least 300M and swap at least 512M). I prefer ~/mnt/efi~ as a mount
    point for the ESP, which is no problem for the grub boot loader,
    but needs a bit more work to configure with encryption.
    
    Here, we don't create a separate home partition, because we
    generate individual btrfs subvolumes which can also be mounted
    separately. With btrfs, we can also use device pooling to set up
    RAID systems. If you decide against RAID, simply create the
    filesystem on a single drive only (leave out ~/dev/sdb~ in all
    following commands).

    | btrfs subvolume |
    |-----------------|
    | @               |
    | @home           |
    | @var            |
    | @tmp            |
    | @snapshots      |

    #+begin_src shell
      gdisk /dev/sda
      # generate a GPT table
      > o
      # create a EFI partition
      > n, 1, <Enter>, +512M, ef00
      # create swap partition
      > n, 2, <Enter>, +4G, 8200
      # create root partition
      > n, 3, <Enter>, <Enter>, <Enter> (or 8300)
      # write scheme to disk and exit
      > w, Y

      gdisk /dev/sdb
      # generate a GPT table
      > o
      # write scheme to disk and exit
      > w, Y
    #+end_src
    
    Once done, format the partitions using

    #+begin_src shell
      mkfs.fat -F 32 /dev/sda1
      mkswap /dev/sda2
      swapon /dev/sda2
      mkfs.btrfs /dev/sda3 /dev/sdb
    #+end_src

    Then, mount the partitions. Note: if you want to create the home
    partition or subvolume on a separate filesystem, you have to ~cd~
    out of the ~/mnt~ directory, unmount the previous partition, and
    mount the other disk to ~/mnt~. On RAID systems this doesn't
    matter as multiple drives form a single filesystem.

    #+begin_src shell
      mount /dev/sda3 /mnt
      cd /mnt
      btrfs subvolume create @
      btrfs subvolume create @home
      btrfs subvolume create @var
      btrfs subvolume create @tmp
      btrfs subvolume create @snapshots
      cd
      umount /mnt

      mkdir -p /mnt/{boot,home,var,tmp,snapshots}  # or /mnt{efi,home,var,tmp,snapshots}
      mount -o noatime,compress=zstd,space_cache=v2,discard=async,subvol=@ /dev/sda3 /mnt
      mount -o noatime,compress=zstd,space_cache=v2,discard=async,subvol=@home /dev/sda3 /mnt/home
      mount -o noatime,compress=zstd,space_cache=v2,discard=async,subvol=@var /dev/sda3 /mnt/var
      mount -o noatime,compress=zstd,space_cache=v2,discard=async,subvol=@tmp /dev/sda3 /mnt/tmp
      mount -o noatime,compress=zstd,space_cache=v2,discard=async,subvol=@snapshots /dev/sda3 /mnt/snapshots
      mount /dev/sda1 /mnt/boot  # or /mnt/efi
    #+end_src

    Note that ~space_cache=v2~ is designed for large filesystems
    (above TB), but it is quite new and thus may be less stable.


*** btrfs partitioning scheme - encrypted

    For most parts, the encrypted btrfs partitioning layout is the
    same as the unencrypted method above.

    First, create the 3 partitions as described above. The EFI
    partition has FAT32 format and can be formatted as such, the swap
    can be temporarily created as above and will be encrypted in a
    later step (see below).

    Before formatting the btrfs partition, we first have to encrypt
    it, with a strong password:
    
    #+begin_src shell
      cryptsetup luksFormat /dev/sda3
    #+end_src

    Confirm the prompt by typing ~YES~ and enter your passphrase.  The
    encryption takes a few seconds to a minute to finish.    

    Afterwards, open the encrypted drive to be able to work on
    the installation.

    #+begin_src shell
      cryptsetup luksOpen /dev/sda3 cryptroot
    #+end_src

    The ~cryptroot~ mapper system can then be formatted

    #+begin_src shell
      mkfs.btrfs /dev/mapper/cryptroot 
    #+end_src

    Mount ~cryptroot~ as root and create the subvolumes

    #+begin_src shell
      mount /dev/mapper/cryptroot /mnt
      cd /mnt
      btrfs subvolume create @
      btrfs subvolume create @home
      btrfs subvolume create @var
      btrfs subvolume create @tmp
      btrfs subvolume create @snapshots
      cd
      umount /mnt

      mount -o noatime,compress=zstd,space_cache=v2,discard=async,subvol=@ /dev/mapper/cryptroot /mnt
      mkdir -p /mnt/{boot,home,var,tmp,snapshots}  # or /mnt/{efi,home,var,tmp,snapshots}
      mount -o noatime,compress=zstd,space_cache=v2,discard=async,subvol=@home /dev/mapper/cryptroot /mnt/home
      mount -o noatime,compress=zstd,space_cache=v2,discard=async,subvol=@var /dev/mapper/cryptroot /mnt/var
      mount -o noatime,compress=zstd,space_cache=v2,discard=async,subvol=@tmp /dev/mapper/cryptroot /mnt/tmp
      mount -o noatime,compress=zstd,space_cache=v2,discard=async,subvol=@snapshots /dev/mapper/cryptroot /mnt/snapshots
      mount /dev/sda1 /mnt/boot  # or /mnt/efi
    #+end_src


* Base install 

  Once everything is correctly partitioned, formatted, and mounted, we
  use ~pacstrap~ to install the base system, linux kernel and
  necessary firmware for the machine. Note: for AMD processors use
  ~amd-ucode~ instead of the intel microcode update image. If you
  chose the classic partitioning layout, there is no need for
  ~btrfs-progs~.

  Note: if stability is of utmost importance, the linux-lts kernel is
  the way to go. For steam and other high-performance tasks the
  linux-zen kernel is optimal. If at some later point another kernel
  is needed, it is always possible to install another alongside.

  #+begin_src shell
    pacstrap /mnt base linux linux-firmware intel-ucode git vim btrfs-progs
  #+end_src

  Once the base install has finished, we generate the filesystem table
  which tells the system on reboot what drives to mount and how

  #+begin_src shell
    genfstab -U /mnt >> /mnt/etc/fstab
    cat /mnt/etc/fstab
  #+end_src


* chroot to /mnt and set up the host

  First chroot into the installation to finish setting up the host.

  #+begin_src shell
    arch-chroot /mnt
  #+end_src

  After this, ~/mnt~ will be ~/~.


**** Optional: swapfile

     If you decided against creating a swap partition, it might be
     wise to at least create a swapfile...

     #+begin_src shell
       dd if=/dev/zero of=/swapfile bs=1M count=512 status=progress
       chmod 600 /swapfile
       mkswap /swapfile
       echo "/swapfile none swap defaults 0 0" >> /etc/fstab
     #+end_src

     So far, I haven't tried encrypting a swapfile, so I can't write
     anything about it here.


*** Set the locale

    Decide on what timezone, language, and keymap you want to use. A
    configuration may look something like

    #+begin_src shell
      # timezone
      ln -sf /usr/share/zoneinfo/Europe/Zurich /etc/localtime
      hwclock --systohc  # generates /etc/adjtime

      # locale
      sed -i '177s/.//' /etc/locale.gen  # uncomments en_US.UTF-8 UTF-8
      locale-gen
      echo "LANG=en_US.UTF-8" >> /etc/locale.conf

      # console
      echo "KEYMAP=de_CH-latin1" >> /etc/vconsole.conf
    #+end_src

    Note that by default arch assumes a US keyboard layout, so only
    add the last command, if you use a different layout.  Also, some
    programs (for instance steam) require the ~en_US.UTF-8 UTF-8~
    locale, so it's best to uncomment at least this one (multiple
    locales are allowed).


*** Set the hostname

    Set your hostname... this of course is a personal choice. For my
    machines, I usually go with mythical creatures from germanic
    mythology. However, my main machine was burned down and
    reinstalled countless times which is why ~archphoenix~ seemed very
    fitting...

    #+begin_src shell
      echo "archphoenix" >> /etc/hostname
      echo "127.0.0.1	localhost" >> /etc/hosts
      echo "::1		    localhost" >> /etc/hosts
      echo "127.0.1.1 archphoenix.localdomain archphoenix" >> /etc/hosts
    #+end_src

    If you haven't already done so, set the password for root.

    #+begin_src shell
      passwd
    #+end_src


*** Initramfs

    In case you're using btrfs and/or encryption, you need to
    regenerate the initramfs with some customizations. In
    ~/etc/mkinitcpio.conf~, add ~btrfs~ to the ~MODULES~ list, and
    ~encrypt~ before ~filesystems~ in the ~HOOKS~ list.

    #+begin_src shell
      # MODULES=(btrfs)
      # HOOKS=(base udev autodetect modconf block encrypt filesystems keyboard consolefont fsck)
      mkinitcpio -p linux
    #+end_src


* Package installs

  Once you have set up your host machine, install all necessary packages.
  Pick and choose what you need...

  #+begin_src shell
    pacman -S grub grub-btrfs efibootmgr dosfstools mtools networkmanager wireless_tools wpa_supplicant openssh dialog base-devel linux-headers git xdg-utils bluez bluez-utils cups alsa-utils pulseaudio pulseaudio-bluetooth pavucontrol
  #+end_src


*** Add yourself as user

    
    Once you installed all the necessary packages, add yourself as
    user. It is generally advisable to create at least another user
    which is not root.  Add the user to any group that is required.
    
    #+begin_src shell
      useradd -m phdenzel
      passwd phdenzel
      usermod -aG wheel,audio,video,optical,storage,kvm phdenzel
      echo "phdenzel ALL=(ALL) ALL" >> /etc/sudoers.d/phdenzel
    #+end_src


* Boot loader install

  Install the boot loader of your choice. In my case, I like ~grub~ ;)

  #+begin_src shell
    grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
    grub-mkconfig -o /boot/grub/grub.cfg
  #+end_src

  Note, if you mounted your ESP on ~/mnt/efi~ instead of ~/mnt/boot~,
  make the necessary changes to the command above (see section below).

  If you encryted your drive, you have to make a few changes to the
  ~/etc/default/grub~ in order for GRUB to be able to recognize the
  encrypted drive. Execute ~blkid~ and copy the UUID of the device
  itself, e.g. ~/dev/sda3~

  #+begin_src  shell
    blkid | awk -F' ' '/sda3/{print $2}'
  #+end_src

  Copy it, or pipe the command above to append to ~/etc/default/grub~,
  and edit it with your preferred text editor.

  The entry in ~/etc/default/grub~, should look something like

  #+begin_src shell
    GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet cryptdevice=UUID=[insert the UUID here]:cryptroot root=/dev/mapper/cryptroot"
  #+end_src

  Once the changes in the grub file are applied, don't forget to
  regenerate the configuration

  #+begin_src shell
    grub-mkconfig -o /boot/grub/grub.cfg
  #+end_src

  In case you happened to install the ~os-prober~ package, you need to
  enable it in the grub configuration and regenerate it
  
  #+begin_src shell
    sed -i 's/#GRUB_DISABLE_OS_PROBER/GRUB_DISABLE_OS_PROBER/g' /etc/defaults/grub
    grub-mkconfig -o /boot/grub/grub.cfg
  #+end_src


* Final touches

  Once everything is installed and configured exit the chroot, unmount
  everything, and reboot.

  #+begin_src shell
    exit
    umount -a
    reboot
  #+end_src


*** Encrypted root and ESP on ~/efi~

    As of time of writing, it is a bit more involved to have the ESP
    mounted at ~/efi~, combined with a LUKS2 encrypted root... however
    it comes with the benefit of having nicely separated directories
    for the kernel and initrd images, and the ability to snapshot
    them in a btrfs system.

    If you make these changes to an existing machine, be sure to make
    the necessary backups and move them to a partition to which you
    have access.

    First, check that the keyslot (0 in my case) of your LUKS2
    partition is using pbkdf2

    #+begin_src shell
      cryptsetup luksDump /dev/sda3
    #+end_src

    and if not convert it

    #+begin_src shell
      cryptsetup luksConvertKey --key-slot 0 --pbkdf pbkdf2 /dev/sda3
    #+end_src

    If you encrypted ~/boot~ you'd have to enter your previously set
    passphrase twice. To avoid this, create a keyfile called
    ~/crypto_keyfile.bin~ and add it as a LUKS key

    #+begin_src shell
      dd bs=512 count=4 if=/dev/random of=/crypto_keyfile.bin iflag=fullblock
      chmod 600 /crypto_keyfile.bin
      chmod 600 /boot/initramfs-linux*
      cryptsetup luksAddKey /dev/sda3 /crypto_keyfile.bin
    #+end_src

    Make also sure to add the keyfile to ~/etc/mkinitcpio.conf~ in the
    FILES list

    #+begin_src shell
      FILES=(/crypto_keyfile.bin)
    #+end_src

    and regenerate the initramfs with ~mkinitcpio -P~.

    If you haven't already, install grub on the ESP, in this case
    ~/efi~ with

    #+begin_src shell
      grub-install --target=x86_64-efi --efi-directory=/efi --boot-directory=/efi --bootloader-id=GRUB
    #+end_src

    In ~/etc/default/grub~ add ~luks2~ to the module preload list and
    enable booting from an encrypted ~/boot~

    #+begin_src shell
      GRUB_PRELOAD_MODULES="part_gpt part_msdos luks2"
      GRUB_ENABLE_CRYPTODISK=y
    #+end_src

    Currently, grub only offers limited support for LUKS2, so mounting
    an encrypted partition has to be configured. For this purpose,
    create a file ~/etc/grub.d/01_header~ and add the UUID of the LUKS
    partition ~/dev/sda3~ without any dashes, for example for the UUID
    ~266584be-d7b7-11eb-8c76-c3eef48c7257~ the entry should be
    ~266584bed7b711eb8c76c3eef48c7257~

    #+begin_src shell
      #!/bin/sh
      echo "cryptomount -u 266584bed7b711eb8c76c3eef48c7257"
    #+end_src

    and regenerate the grub configuration

    #+begin_src shell
      grub-mkconfig -o /efi/grub/grub.cfg
    #+end_src

    Additionally, if you chose to install ~grub-btrfs~, you also need
    to change the path of the ESP in the configuration file
    ~/etc/default/grub-btrfs/config~

    #+begin_src shell
    GRUB_BTRFS_GRUB_DIRNAME="/efi/grub"
    #+end_src

    and add the initramfs hook at the end to be able to boot read-only
    snapshots

    #+begin_src shell
      HOOKS=(... grub-btrfs-overlayfs)
    #+end_src

    and remember to regenerate the image with ~mkinitcpio -P~.


*** Encrypting the swap partition

    From a security perspective it is important to also encrypt your
    swap partition, as it could hold unencrypted sensitive memory
    pages for a long time. The idea is to create a setup where at each
    reboot swap would be re-encrypted. However, the downside of such
    an approach is that hibernation thus becomes intrinsically
    disabled. (For me this does not matter as I never use hibernation
    anyways.)

    Such as setup can be implemented with the ~/etc/crypttab~
    file. Unfortunately, using devices names (such as ~/dev/sda2~) is
    a bad idea, as changes in the naming could lead to the encryption
    of the wrong drives and therefore potentially also to data
    loss. We therefore need a persistent LABEL or UUID for the swap
    partition, which is achieved by adding a tiny offset on the
    partition with the sole purpose of holding a LABEL and UUID.

    #+begin_src shell
      swapoff /dev/sda2
      mkfs.ext2 -L cryptswap /dev/sda2 1M
    #+end_src

    Check the parition using ~blkid~ should now show the label on
    ~/dev/sda2~ which we can enter in the crypt table

    #+begin_src shell
      # <name> <device>         <password>    <options>
      swap     LABEL=cryptswap  /dev/urandom  swap,offset=2048,cipher=aes-xts-plain64,size=512
    #+end_src

    Note the offset of 2048 sectors 512 bytes each, making exactly
    1M. As we now have encrypted swap, we need to change the UUID of
    the swap parition with the mapper device in the ~/etc/fstab~
    file.

    #+begin_src shell
      # /dev/sda2
      /dev/mapper/swap    none    swap    defaults    0 0
    #+end_src

    Trying ~mount -a~ now shouldn't lead to errors. After the next
    reboot you should have encrypted swap.


**** Optional: VM UEFI shell startup.nsh fix

     On a virtual machine using the kvm hypervisor and an OVMF image,
     it might be necessary to create a ~fs0:; edit startup.nsh~ file
     and add the following lines

     #+begin_src shell
       fs0:
       cd EFI
       cd GRUB
       grubx64.efi
     #+end_src


* Post reboot

  Enable your services. This of course depends on the packages you
  installed. You may have to reboot once more, before everything is
  working...

  #+begin_src shell
    sudo systemctl enable reflector.timer
    sudo systemctl start NetworkManager
    sudo systemctl enable NetworkManager
    sudo systemctl enable bluetooth
    sudo systemctl enable cups.service
    sudo systemctl enable sshd
    sudo systemctlenable fstrim.timer
  #+end_src

  If there is no ethernet cable plugged in, you may have to edit
  ~/etc/wpa_supplicant/wpa_supplicant.conf~ and your network info.
  Make sure to use ~wpa_passphrase~ to enter your encrypted network
  password.


* Useful laptop settings

  Shutting the lid of a laptop sometimes misbehaves. Use the following
  settings in ~/etc/systemd/logind.conf~ to activate suspend

  #+begin_src shell
    HandlePowerkey=suspend
    HandleLidswitch=suspend
  #+end_src

  Sometimes, an issue arises after wakeup (see ~/proc/acpi/wakeup~)
  where XHC1 is enabled. Fix this by disabling it at boot time in
  ~/etc/udev/rules.d/90-xhc_sleep.rules~

  #+begin_src shell
    # disable wake from S3 on XHC1
    SUBSYSTEM=="pci", KERNEL=="0000:00:14.0", ATTR{device}=="0x9c31" RUN+="/bin/sh -c '/bin/echo disabled > /sys$env{DEVPATH}/power/wakeup'"
  #+end_src

  For CPU-related power management, install some useful packages

  #+begin_src shell
    pacman -S thermald cpupower
    sudo systemctl enable thermald
    sudo systemctl start thermald
    sudo systemctl enable cpupower
    sudo systemctl start cpupower
  #+end_src

  Audio can also contribute to power saving, add a configuration file
  for your Intel Audio card to ~/etc/modprobe.d/60-snd_hda_intel.conf~

  #+begin_src shell
    # Enable Power Saving on Intel HDA Audio
    options snd_hda_intel power_save=1
  #+end_src
